######################################################### -*-Makefile-*-
#
# File:   standard.mk.in
# Author: Alex Samuel
# Date:   2001-01-09
#
# Contents:
#   GNU Makefile fragment with common rules amd configuration.
#
# Usage:
#   Makefiles in subdirectories should define relevant variables,
#   and then include this fragment:
#
#     include $(TOPDIR)/standard.mk
#
#   Variables handled by these makefile rules include
#
#     SUBDIRS:      Subdirectories of the current directory.
#
#     DOCBOOK:      DocBook XML source files.
#     DOCBOOKMAIN:  The main DocBook XML source file.
#
#     DOCBITMAPS:   Bitmap files used in the HTML documentation.
# 
# Copyright (C) 2001 CodeSourcery LLC
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
########################################################################

# This trick is necessary to create a make variable containing a
# single space.  See the "(make)Flavors" info page.
NULLSTRING	:=
SPACE		:= $(NULLSTRING) # This comment needs to be here.

########################################################################
# Configuration
########################################################################

# Assign MAKE correctly, for recursive makes.
@SET_MAKE@

# Output directories.
BUILDDIR	= $(TOPDIR)/build
DOCDIR		= $(BUILDDIR)/doc

# Python configuration.
PYTHONBIN	= @PYTHON@
PYTHON 		= env PYTHONPATH=$(subst $(SPACE),:,$(PYTHONDIRS)) \
		  $(PYTHONBIN) -O
PYTHON_VERSION	= @PYTHON_VERSION@
PYTHON_PREFIX   = @PYTHON_PREFIX@
PYTHON_PLATFORM = @PYTHON_PLATFORM@
MAKEFILE_PRE_IN = $(PYTHON_PREFIX)/lib/python$(PYTHON_VERSION)/config/Makefile.pre.in
PYTHONDIRS	= $(TOPDIR) \
                  $(TOPDIR)/zope-dtml \
                  $(TOPDIR)/zope-dtml/ExtensionClass

DOCUMENTATION   = @DOCUMENTATION@

ifeq ($(DOCUMENTATION),yes)
  # Jade configuration,
  JADE		= @JADE@
  JADEEXTRA	= @XML_DCL@

  # The directory containing the Docbook DTD.
  SGMLDIRS      += @DOCBOOK_DTD@
  # Modular DSSSL stylesheet configuration.  The system identifiers are
  # specified as relative paths, so the base of the stylesheet
  # installation needs to be provided.
  SGMLDIRS      += @DOCBOOK_STYLESHEETS@ 

  # QM stylesheets.
  HTMLSS        = $(TOPDIR)/doc/qm-html.dsl
  PRINTSS       = $(TOPDIR)/doc/qm-print.dsl

  # Output directory, index HTML files, and manifest file for HTML
  # output.  These are controlled by the DSSSL stylesheet for HTML.
  HTMLDIR	= html
  HTMLINDEX	= $(HTMLDIR)/index.html
  HTMLMANIFEST	= $(HTMLDIR)/docbook-html.manifest

  # Tarball containing HTML output.
  HTMLTARBALL	= $(HTMLDIR)/$(DOCBOOKMAIN:.xml=.tgz)

  # Output directory and output files generated with the DSSSL stylesheet
  # for TeX.
  PRINTDIR	= print
  ifneq ($(DOCBOOKMAIN),)
    PRINTTEX	= $(DOCBOOKMAIN:.xml=.tex)
    PRINTPDF	= $(DOCBOOKMAIN:.xml=.pdf)
  else
    PRINTTEX	= tex
    PRINTPDF	= pdf
  endif

  # Tidy configuration.
  TIDY 		= @TIDY@
  TIDYFLAGS	= -wrap 72 -i --indent-spaces 1
endif

# HappyDoc configuration.
HAPPYDOC	= @HAPPYDOC@

# The install program.
INSTALL		= @top_srcdir@/install-sh -c
INSTALL_DATA    = $(INSTALL) -m 644
INSTALL_DIR     = $(INSTALL) -d
INSTALL_PROGRAM = $(INSTALL)
INSTALL_SCRIPT  = $(INSTALL_PROGRAM)

# Places to install things.
prefix		= @prefix@
exec_prefix	= @exec_prefix@
INSTALLBINDIR	= @bindir@
INSTALLLIBDIR	= @libdir@/qm
INSTALLSHAREDIR	= @datadir@/qm
INSTALLDOCDIR   = @datadir@/doc/qm
INSTALLINCDIR   = @includedir@

ifneq ($(PYTHON_PLATFORM),win32)
NATPREFIX       = $(prefix)
else
NATPREFIX       := $(shell cygpath -a -w $(prefix))
endif

.PHONY:		all clean doc subdirs test
.PHONY:         doc-html doc-print docbook-html docbook-print doc-python
.PHONY:		install
.PHONY:		$(SUBDIRS)

########################################################################
# Rules
########################################################################

ifeq ($(PYTHON_PLATFORM),win32)
SCRIPT_EXT = .bat
else
SCRIPT_EXT =
endif

all::		subdirs

subdirs:	$(SUBDIRS)

$(SUBDIRS):	
	@cd $@ && make

# Generate documentation from Python sources using HappyDoc.
ifneq ($(PYTHONDOCDIRS),)
  doc-python:	$(PYTHONDOCDIRS)
	for dir in $(PYTHONDOCDIRS); do \
	  $(HAPPYDOC) -d $(DOCDIR) -F htmltable -T docset $${dir}; \
	done
endif

# Generate html and print documentation from DocBook source, if it was
# specified.
ifeq ($(DOCUMENTATION),yes)
  doc-all:	doc-html doc-print

  ifneq ($(DOCBOOKMAIN),)
    doc-html:	docbook-html
    doc-print:	docbook-print
  else
    doc-html:	
    doc-print:	
  endif

  docbook-html:	$(HTMLINDEX)

  docbook-print: \
		$(PRINTDIR)/$(PRINTPDF)


  # The DocBook modular stylesheets generate some sloppy HTML.  Process
  # it with tidy.  Unfortunately, tidy will emit copious warnings;
  # funnel them to /dev/null.  Also tidy returns non-zero indicating
  # warnings; supress this by running true.
  #
  # For each image file required by the HTML documentation output, copy
  # it into the output directory and also add the filename to the
  # manifest.
  $(HTMLMANIFEST) $(HTMLINDEX): \
		$(DOCBOOKMAIN) $(DOCBOOK) $(DOCBITMAP)
	mkdir -p $(HTMLDIR)
	$(JADE) \
	  $(foreach dir,$(SGMLDIRS),-D$(dir)) \
	  -t sgml -d $(HTMLSS) \
	  $(JADEEXTRA) \
	  $(DOCBOOKMAIN)
  ifneq ($(TIDY),no)
	for f in html/*.html; \
	do \
	  $(TIDY) $(TIDYFLAGS) -f /dev/null -asxml -modify $${f}; \
	  true; \
	done 
  endif
  ifneq ($(DOCBITMAPS),)
	for gr in $(DOCBITMAPS); \
	do \
	  cp $${gr} $(HTMLDIR)/; \
	  echo $${gr##*/} >> $(HTMLMANIFEST); \
	done
  endif

  # Build a tarball containing the whole HTML output.
  $(HTMLTARBALL): \
		$(HTMLMANIFEST)
	tar zcf $(HTMLTARBALL) \
	  $(foreach f,$(shell cat $(HTMLMANIFEST)),$(HTMLDIR)/$(f))

  # Jade places the output TeX source file in the current directory, so
  # move it where we want it afterwards.
  $(PRINTDIR)/$(PRINTTEX): \
		$(DOCBOOKMAIN) $(DOCBOOK)
	mkdir -p $(PRINTDIR)
	$(JADE) \
	  $(foreach dir,$(SGMLDIRS),-D$(dir)) \
	  -t tex -d $(PRINTSS) \
	  $(JADEEXTRA) \
	  $<
	# Change -- into -{-} so that TeX does not generate long 
	# dashes.
	sed -e 's|--|-{-}|g' < $(PRINTTEX) > $@

  # Process the TeX file to PDF, in the print directory.  
  $(PRINTDIR)/$(PRINTPDF): \
		$(PRINTDIR)/$(PRINTTEX)
	test "$(DOCBITMAPS)" && cp $(DOCBITMAPS) $(PRINTDIR)/ || true
	cd $(PRINTDIR); \
	    pdfjadetex $(PRINTTEX) ; \
	    pdfjadetex $(PRINTTEX) ; \
	    pdfjadetex $(PRINTTEX) 
else
  doc-all:
endif

clean::
	@for subdir in $(SUBDIRS); do \
          (cd $${subdir} && make $@); \
        done
