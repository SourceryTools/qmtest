<?xml version="1.0"?>
<!--

  File:   track-reference.xml
  Author: Alex Samuel
  Date:   2001-10-13

  Contents:
    Reference guide for QMTrack.

  Copyright (C) 2001 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<chapter id="chap-track-reference">
 <title>&qmtrack; Reference</title>

 <para>This section provides details about configuring and extending
 &qmtrack;.</para>

 <section id="sec-writing-triggers">
  <title>Writing Trigger Classes</title>

  <para>A <link linkend="sec-triggers">trigger</link> contains code that
  is run when an issue is retrieved or stored in the issue database.
  Each <link linkend="sec-issue-classes">issue class</link> can be
  configured with one or more triggers, and triggers are invoked
  sequentially when an issue of that issue class is retrieved or
  stored.</para>

  <para>Triggers are represented by Python objects.  A trigger object is
  an instance of a <firstterm>trigger class</firstterm>, which is a
  subclass of the <classname>qm.track.issue_class.Trigger</classname>
  class.  By writing your own trigger class and adding triggers of this
  class to your issue classes, you can implement a wide variety of
  custom behavior in &qmtrack;.</para>

  <para>Instead of using ordinary Python attributes, a trigger class
  stores its configuration settings in named
  <firstterm>properties</firstterm>, whose values are strings.  The
  class may use the <function>GetProperty</function> and
  <function>SetProperty</function> methods of
  <classname>qm.track.issue_class.Trigger</classname> to set and get
  property values.  In addition, the class must declare those properties
  which compose the trigger's persistent configuration with the
  <varname>property_declarations</varname> variable (see below); this
  allows &qmtrack; to store and retreive the trigger configuration and
  generate user interfaces for modifying the trigger configuration.  A
  trigger class should use ordinary Python attributes only for transient
  data.</para>

  <para>A trigger class must satisfy the following requirements:</para>
 
  <orderedlist>
   <listitem>
    <para>The class must be a (direct or indirect) subclass of
    <classname>qm.track.issue_class.Trigger</classname>.</para>
   </listitem>

   <listitem>
    <para>The class must define a class variable
    <varname>class_name</varname>, which contains a string
    representation of the Python class's name, fully-qualified with the
    name of the package containing it.</para>
   </listitem>

   <listitem>
    <para>The class must define a class variable
    <varname>property_declarations</varname>.  This is a tuple of
    <classname>qm.fields.PropertyDeclaration</classname> objects
    describing the properties that comprise the trigger's persistent
    configuration.</para>

    <para>Generally, a trigger classe will define this value by adding
    to the <varname>property_declarations</varname> tuple of its base
    class.  This ensures the base classes properties are included in the
    trigger's configuration.</para>
   </listitem>

   <listitem>
    <para>The class must define an <function>__init__</function>
    function.  This function should have a <varname>name</varname>
    parameter plus parameters for any other properties with values that
    always must be specified when the trigger is created.  The function
    should also accept arbitrary other named arguments, and pass them to
    its base-class <function>__init__</function> function.</para>
   </listitem>

   <listitem>
    <para>The class should redefine the <function>Get</function>
    function, if the trigger is to have "get" behavior.  This function
    is invoked before an issue is retrieved from the issue database, and
    passed the issue as its sole argument.</para>

    <para>The function should return a
    <classname>TriggerResult</classname> object, specifying the
    <literal>ACCEPT</literal> outcome if the retrieval is to continue.
    If the <function>Get</function> function specifies the
    <literal>REJECT</literal> outcome, the retrieval is cancelled, and
    the <function>Get</function> functions of other triggers are not
    run.</para>

    <para>The default <function>Get</function> function specifies the
    <literal>ACCEPT</literal> outcome and takes no other action.</para>
   </listitem>

   <listitem>
    <para>The class should redefine the <function>Preupdate</function>
    function, if the trigger is to have "preupdate" behavior.  This
    function is invoked before an issue is changed in the issue
    database, or before a new issue is inserted.  The function is passed
    two arguments: the first is the new or modified issue; the second is
    the previous revision of the same issue, or <literal>None</literal>
    if it is a new issue.</para>

    <para>The function should return a
    <classname>TriggerResult</classname> object, specifying the
    <literal>ACCEPT</literal> outcome if the issue modification or
    insertion is to continue.  If the <function>Preupdate</function>
    function specifies the <literal>REJECT</literal> outcome, the
    insertion is cancelled, and the <function>Preupdate</function>
    functions of other triggers are not run.</para>

    <para>The default <function>Preupdate</function> function specifies
    the <literal>ACCEPT</literal> outcome and takes no other
    action.</para>
   </listitem>

   <listitem>
    <para>The class should redefine the <function>Postupdate</function>
    function, if the trigger is to have "postupdate" behavior.  This
    function is invoked after an issue is changed in the issue database,
    or after a new issue is inserted.  The function is passed two
    arguments: the first is the new or modified issue; the second is the
    previous revision of the same issue, or <literal>None</literal> if
    it is a new issue.</para>

    <para>The <function>Postupdate</function> function's return value is
    ignored.  Since it is invoked after the issue modification or
    insertion has been committed to the issue database, it cannot
    prevent the action.</para>
   </listitem>

  </orderedlist>  

  <section id="sec-trigger-results">
   <title>Trigger Results</title>

   <para>The <function>Get</function> and <function>Preupdate</function>
   functions of a trigger class should return an instance of
   <classname>qm.track.issue_class.TriggerResult</classname>, specifying
   the result of the trigger operation.  The initialzer for
   <classname>TriggerResult</classname> takes three arguments:</para>

   <itemizedlist>
    <listitem>
     <para><varname>trigger</varname> is the trigger which produced the
     result.  This will normally be <literal>self</literal> in a
     trigger's <function>Get</function> or
     <function>Preupdate</function> function.</para>
    </listitem>

    <listitem>
     <para><varname>outcome</varname> is the trigger outcome, and should
     be one of
     <varname>qm.track.issue_class.TriggerResult.ACCEPT</varname> or
     <varname>qm.track.issue_class.TriggerResult.REJECT</varname>.  The
     former indicates that the operation should be allowed to continue
     (pending acceptance by other triggers); the latter stops processing
     of the operation immediately.</para>
    </listitem>

    <listitem>
     <para><varname>message</varname> is an option argument containing a
     string message describing the trigger's operation.  The message is
     used only if the outcome is <literal>REJECT</literal>.  A
     <function>Get</function> or <function>Preupdate</function> function
     that returns a <literal>REJECT</literal> outcome should specify a
     message, to indicate to the user the reason that the operation was
     rejected.</para>
    </listitem>

   </itemizedlist>

  </section> <!-- sec-trigger-results -->

  <section id="sec-trigger-example">
   <title>Example</title>

   <para>The following is a simple trigger class which validates a text
   field.  The trigger rejects modifications to an issue (or insertion
   of a new issue) which leave the value of specific text field empty.
   The name of the field to validate is specified by the
   <literal>field_name</literal> attribute.</para>

   <programlisting>
<![CDATA[import string
from qm.fields import PropertyDeclaration
from qm.track.issue_class import Trigger, TriggerResult

class TextFieldValidateTrigger(Trigger):
    class_name = "custom_triggers.TextFieldValidateTrigger"

    property_declarations = Trigger.property_declarations + (
        PropertyDeclaration(
            name="field_name",
            description="The name of the field to validate.",
            default_value="")
    )

    def __init__(self, name, field_name, **properties):
        # Initialize the base class.
        apply(Trigger.__init__, (name, ), properties)
        # The field name is part of the trigger's configuration.  Store
        # it as a property.
        self.SetProperty("field_name", field_name)

    def PreUpdate(self, issue, previous_issue):
        # Extract the field name from the "field_name" property.
        field_name = self.GetProperty("field_name")
        # Get this issue's value of that field.
        field_value = issue.GetField(field_name)
        # Is it empty?
        if string.strip(field_value) == "":
            # Yes.  Reject the change.
            return TriggerResult(self, TriggerResult.REJECT,
                "The %s field is empty." % field_name)
        else:
            # Not empty.  Allow the modification to continue.
            return TriggerResult(self, TriggerResult.ACCEPT)
        
]]>
   </programlisting>   

   <para>This class should be placed in a package named
   <filename>custom_triggers</filename>, accessible from the
   <envar>PYTHONPATH</envar>.</para>

  </section> <!-- sec-trigger-example -->

 </section> <!-- sec-writing-triggers -->

</chapter>
<!--
  Local Variables:
  mode: sgml
  indent-tabs-mode: nil
  sgml-indent-step: 1 
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  sgml-parent-document: ("manual.xml" "book" "chapter")
  End:
-->
