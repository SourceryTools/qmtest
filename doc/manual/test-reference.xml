<?xml version="1.0"?>
<!--

  File:   test-reference.xml
  Author: Alex Samuel
  Date:   2001-04-30

  Contents:
    Reference guide for QMTest.

  Copyright (C) 2001 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<chapter id="chap-test-reference">
 <title>&qmtest; Reference</title>

 <section id="sec-test-command-line">
  <title>Command Line Reference</title>

  <para>The &qmtest-cmd; program understands these general options.
  They can be used with any command, and should precede the command name
  on the command line.</para>

  <para>All options are available in a "long form," prefixed with
  "&dashdash;" (two hyphens).  Some options also may be specified in a
  "short form," consisting of a single hyphen and a one-letter
  abbreviation (listed below in parentheses).  Short-form options may be
  combined in the manner typical for UNIX programs; for example,
  <command>-abc</command> is equivalent to <command>-a -b
  -c</command>.</para>

  <glosslist>
   <glossentry>
    <glossterm>
     <option>&dashdash;help</option> (<option>-h</option>)
    </glossterm>
    <glossdef>
     <para>Display help information, listing commands and general
     options for the &qmtest-cmd; command.</para>
    </glossdef>
   </glossentry>

   <glossentry>
    <glossterm>
     <option>&dashdash;verbose</option> (<option>-v</option>)
    </glossterm>
    <glossdef>
     <para>Generate progress and status messages while executing.  This
     option may be specified more than once; the more times it is
     specified, the higher the verbose level, and the more messages are
     printed.</para>
    </glossdef>
   </glossentry>

   <glossentry>
    <glossterm>
     <option>&dashdash;db-path</option> <replaceable>PATH</replaceable> 
     (<option>-D</option>)
    </glossterm>
    <glossdef>
     <para>Use the test database located at
     <replaceable>PATH</replaceable>.  This flag overrides the value of
     the environment variable <envar>QMTEST_DB_PATH</envar>, but if this
     flag is not specified, the environment variable must be
     defined.  See <xref linkend="sec-test-database"/>.</para>
    </glossdef>
   </glossentry>

  </glosslist>

  <para>Additional options are available for specific commands; these
  are presented with each command.  Options specific to a command must
  follow the command on the command line.  Specify the
  <option>&dashdash;help</option> (<option>-h</option>) option after the
  command for a description of the command and a list of of available
  options for that command.</para>

  <section id="sec-testcmd-run">
   <title>The <command>&qmtest-cmd; run</command> Command</title>

   <para>The <command>&qmtest-cmd; run</command> command runs tests.
   Specify one or more test and/or test suite IDs on the command line,
   or omit additional arguments to run all the tests in the test
   database.  Tests listed more than once (directly or by inclusion in a
   test suite) are run only once.  Tests may not be run in the order
   listed.</para>

   <para>The <command>run</command> accepts these options:</para>

   <glosslist>
    <glossentry>
     <glossterm>
      <option>&dashdash;output</option> <replaceable>FILE</replaceable> 
      (<option>-o</option>)
     </glossterm>
     <glossdef>
      <para>Write full test results to <replaceable>FILE</replaceable>.
      Specify "<literal>-</literal>" (a hyphen) to write results to
      standard output.  See &fixme; xref for a description of the format
      of test result files.</para>
     </glossdef>
    </glossentry>

    <glossentry>
     <glossterm>
      <option>&dashdash;no-output</option>
     </glossterm>
     <glossdef>
      <para>Don't write full test results (the default).</para>
     </glossdef>
    </glossentry>

    <glossentry>
     <glossterm>
      <option>&dashdash;summary</option> <replaceable>FILE</replaceable> 
      (<option>-s</option>)
     </glossterm>
     <glossdef>
      <para>Write a summary of the test run to
      <replaceable>FILE</replaceable>.  Specify "<literal>-</literal>"
      (a hyphen) to write results to standard output (the default).  </para>

      <para>&qmtest; prints a summary of test results, including
      statistics and the test IDs of tests that did not pass.  If
      expected outcomes were specified, test IDs of tests that produced
      unexpected outcomes.</para>
     </glossdef>
    </glossentry>

    <glossentry>
     <glossterm>
      <option>&dashdash;no-summary</option> (<option>-S</option>)
     </glossterm>
     <glossdef>
      <para>Don't write a summary of the test run.</para>
     </glossdef>
    </glossentry>

    <glossentry id="opt-test-run-context">
     <glossterm>
      <option>&dashdash;context</option> <replaceable>NAME=VALUE</replaceable>
      (<option>-c</option>)
     </glossterm>
     <glossdef>
      <para>Add a property to the <link linkend="sec-the-context">test
      execution context</link>.  The name of the property is
      <replaceable>NAME</replaceable>, and its value is set to the string
      <replaceable>VALUE</replaceable>.</para>

      <para>This option may be specified multiple times.</para>
     </glossdef>
    </glossentry>

    <glossentry id="opt-test-run-context-file">
     <glossterm>
      <option>&dashdash;load-context</option> <replaceable>FILE</replaceable>
      (<option>-C</option>)
     </glossterm>
     <glossdef>
      <para>Read properties for the <link linkend="sec-the-context">test
      execution context</link> from the file
      <replaceable>FILE</replaceable>.</para>

      <para>The file should be a text file with one context property on
      each line, in the format <replaceable>NAME=VALUE</replaceable>.
      Leading and trailing whitespace on each line are ignored.  Also,
      blank lines and lines that begin with "#" (a hash mark) are
      ignored as comments.</para>

      <para>This option may be specified more than once, and used in
      conjunction with the <option>&dashdash;context</option> option.</para>
     </glossdef>
    </glossentry>

    <glossentry>
     <glossterm>
      <option>&dashdash;concurrency</option> <replaceable>COUNT</replaceable>
      (<option>-j</option>)
     </glossterm>
     <glossdef>
      <para>Run tests in multiple <replaceable>COUNT</replaceable>
      concurrent processes on the local computer.  On multiprocessor
      machines, the processes may be scheduled to run in parallel on
      different processors.  &qmtest; automatically collects results
      from the processes and presents combines test results and summary.
      By default, one process is used.</para>

      <para>This option may not be combined with the <link
      linkend="opt-test-run-targets"><option>&dashdash;targets</option>
      (<option>-T</option>) option</link>.</para>
     </glossdef>
    </glossentry>

    <glossentry id="opt-test-run-targets">
     <glossterm>
      <option>&dashdash;targets</option> 
      <replaceable>FILE</replaceable> (<option>-T</option>)
     </glossterm>
     <glossdef>
      <para>Use targets specified in target specification file
      <replaceable>FILE</replaceable>.  See <xref
      linkend="sec-target-files"/> for a description of the target file
      syntax.</para>
     </glossdef>
    </glossentry>

    <glossentry>
     <glossterm>
      <option>&dashdash;seed</option> <replaceable>INTEGER</replaceable>
     </glossterm>
     <glossdef>
      <para>For each test run, &qmtest; randomizes the order in which
      tests are run, subject to the constraints described in <xref
      linkend="sec-ordering-and-dependencies"/>.  The random number
      generator is seeded using the system time.  This maximizes the
      chance of detecting unanticipated dependencies among tests across
      multiple test runs.</para>

      <para>For debugging purposes, it is sometimes necessary to obtain
      a reproducable sequence of tests.  Use the
      <option>&dashdash;seed</option> option to specify the seed for the
      random number generator.</para>

      <para>Note that even with the same random number seed, if tests
      are run on targets with a concurrency greater than one, scheduling
      uncertainty may still produce variation in the order in which
      tests are run.</para>
     </glossdef>
    </glossentry>

   </glosslist>
   
  </section> <!-- sec-testcmd-run -->

 </section>

 <section id="sec-ref-classes">
  <title>Test and Resource Classes</title>

  <para>This section describes test classes and resource classes
  included with &qmtest;.  <xref linkend="sec-writing-test-classes"/>
  provides instructions for writing your own test classes, <xref
  linkend="sec-writing-resource-classes"/> for resource classes.</para>

  <section id="sec-ref-test-classes">
   <title>Test Classes</title>

   <section id="sec-exectest">
    <title><classname>command.ExecTest</classname></title>

    <para>The <classname>command.ExecTest</classname> test class runs a
    program from an ordinary executable file.  Each test specifies the
    program executable to run, its full command line, and the data to
    feed to its standard input stream.  <classname>ExecTest</classname>
    collects the complete text of the program's standard output and
    standard error streams and the program's exit code, and compares
    these to expected values specified in the test.  If the standard
    output and error text and the exit code match the expected values,
    the test passes.</para>

    <para>A <classname>command.ExecTest</classname> test supplies the
    following arguments:</para>

    <glosslist>
     <glossentry>
      <glossterm><property>Program</property> (text field)</glossterm>
      <glossdef>
       <para>The name of the executable file to run.
       <classname>command.ExecTest</classname> attempts to locate the
       program executable in the path specified by the
       <property>path</property> property of the test context.</para>
      </glossdef>
     </glossentry>

     <glossentry>
      <glossterm><property>Argument List</property> (set field of text
      items)</glossterm>
      <glossdef>
       <para>The argument list for the program.  The elements of this
       set are sequential items from which the program's argument list
       is constructed.  <classname>command.ExecTest</classname>
       automatically prepends an implicit zeroth element, the full path
       of the program.</para>
      </glossdef>
     </glossentry>

     <glossentry>
      <glossterm><property>Standard Input</property> (text
      field)</glossterm>
      <glossdef>
       <para>Text or data to pass to the program's standard input
       stream.  This data is written to a temporary file, and the
       contents of the file are directed to the program's standard
       input stream.</para>
      </glossdef>
     </glossentry>

     <glossentry>
      <glossterm><property>Environment</property> (set field of text
      items)</glossterm>
      <glossdef>
       <para>The environment (i.e. the set of environment variables)
       available to the executing program.  Each element of this
       argument is a string of the form
       "<replaceable>VARIABLE</replaceable>=<replaceable>VALUE</replaceable>".</para>

       <para><classname>command.ExecTest</classname> adds additional
       environment variables automatically.  Each context property is
       accessible as an environment variable; the name of the
       environment variable is the name of the context property,
       prefixed with "<envar>QMV_</envar>".</para>
      </glossdef>
     </glossentry>

     <glossentry>
      <glossterm><property>Expected Exit Code</property> (integer
      field)</glossterm>
      <glossdef>
       <para>The exit code value expected from the program.  If the
       program produces an exit code value different from this one, the
       test fails.</para>
      </glossdef>
     </glossentry>

     <glossentry>
      <glossterm><property>Expected Standard Ouptut</property>
      (text field)</glossterm>
      <glossdef>
       <para>The text or data which the program is expected to produce
       on its standard output stream.  The actual text or data written
       to standard output is captured, and
       <classname>command.ExecTest</classname> performs a bytewise
       comparison to the expected text or data.  If they do not match,
       the test fails.</para>
      </glossdef>
     </glossentry>

     <glossentry>
      <glossterm><property>Expected Standard Input</property>
      (text field)</glossterm>
      <glossdef>
       <para>The text or data which the program is expected to produce
       on its standard error stream.  The actual text or data written to
       standard error is captured, and
       <classname>command.ExecTest</classname> performs a bytewise
       comparison to the expected text or data.  If they do not match,
       the test fails.</para>
      </glossdef>
     </glossentry>

    </glosslist>

   </section> <!-- sec-exectest -->

   <section id="sec-commandtest">
    <title><classname>command.CommandTest</classname></title>

    <para><classname>command.CommandTest</classname> is very similar to
    <classname>command.ExecTest</classname>, except that it runs a
    program via a shell script invocation rather than directly.  Instead
    of specifying an executable to run and the elements of its argument
    list, a test provides a single command line.  The shell is
    responsible for finding the executable and constructing its argument
    list.</para>

    <para>Standard input and the environment are specified in the test.
    The test passes if the command produces the expected standard
    output, standard error, and exit code.</para>

    <para>Note that most shells create local shell variables to mirror
    the contents of the environment when the shell starts up.
    Therefore, the environment set up by a
    <classname>command.CommandTest</classname>, including the contents
    of the test context, are directly accessible via shell variables.
    The syntax to use depends on the particular shell.</para>

    <para><classname>command.CommandTest</classname> has the same fields
    as <classname>command.ExecTest</classname>, except that the
    <property>Program</property> and <property>Argument List</property>
    properties are replaced with these:</para>

    <glosslist>
     <glossentry>
      <glossterm><property>Command</property> (text field)</glossterm>
      <glossdef>
       <para>The command to run.  The command is delivered verbatim to
       the shell.  The shell interprets the command according to its own
       quoting rules andd syntax.</para>
      </glossdef>
     </glossentry>

     <glossentry>
      <glossterm><property>Command Interpreter</property> (text
      field)</glossterm>
      <glossdef>
       <para>The path to the shell or command interpreter program with
       which to interpret the command.  If this field is left empty, the
       system's default shell is used.  On UNIX-like systems, the
       default is "<filename>/bin/sh -norc -noprofile
       -c</filename>".</para>
      </glossdef>
     </glossentry>
    </glosslist>

   </section> <!-- sec-commandtest -->

   <section id="sec-scripttest">
    <title><classname>command.ScriptTest</classname></title>

    <para><classname>command.ScriptTest</classname> is an extension of
    <classname>command.CommandTest</classname> that lets a test specify
    an entire shell script instead of a single command.  The script
    specified in the test is written to a temporary file, and this file
    is interpreted by the specified shell or command interpreter
    program.</para>

    <para>Standard input, the environment, and the argument list to pass
    to the script are specified in the test.  The test passes if the
    script produces the expected standard output, standard error, and
    exit code.</para>

    <para>Note that most shells create local shell variables to mirror
    the contents of the environment when the shell starts up.
    Therefore, the environment set up by a
    <classname>command.ScriptTest</classname>, including the contents of
    the test context, are directly accessible via shell variables.  The
    syntax to use depends on the particular shell.</para>

    <para><classname>command.ScriptTest</classname> has the same fields
    as <classname>command.ExecTest</classname>, except that the
    <property>Program</property> property is replaced with these:</para>

    <glosslist>
     <glossentry>
      <glossterm><property>Script</property> (text field)</glossterm>
      <glossdef>
       <para>The text of the script to run.</para>
      </glossdef>
     </glossentry>

     <glossentry>
      <glossterm><property>Script Interpreter</property> (text
      field)</glossterm> 
      <glossdef>
       <para>The path to the shell or command interpreter program with
       which to interpret the script.  If this field is left empty, the
       system's default shell is used.  On UNIX-like systems, the
       default is "<filename>/bin/sh -norc
       -noprofile</filename>".</para>
      </glossdef>
     </glossentry>
    </glosslist>

   </section> <!-- sec-scripttest -->

  </section> <!-- sec-ref-test-classes -->

 </section> <!-- sec-ref-classes -->

 <section id="sec-ref-targets">
  <title>Test Targets</title>

  <para>Test targets represent entities that &qmtest; uses to run
  tests.  See <xref linkend="sec-targets"/> for an overview of how
  &qmtest; uses targets.</para>

  <section id="sec-target-specification">
   <title>Target Specification</title>

   <para>Each target specification includes the following:</para>

   <orderedlist>
    <listitem>
     <para>The name of the target.  This is a name identifying the
     target, such as the host name of the computer which will run the
     tests.  Target names should be unique in a single target
     file.</para>
    </listitem>

    <listitem>
     <para>The <firstterm id="def-target-class">target
     class</firstterm>.  Similar to a test class, a target class is a
     Python class which implements a type of target.  As with test
     classes, a target class is identified by its name, which includes
     the module name and the class name.</para>

     <para>For example,
     <classname>qm.test.run.SubprocessTarget</classname> is the name of
     a target class, provided by &qmtest;, which runs tests in multiple
     subprocesses on the local computer.</para>

     <para>&qmtest; includes several target class implementations.  See
     <xref linkend="sec-target-classes"/> for details.</para>
    </listitem>

    <listitem>
     <para>A <link linkend="def-target-group">target group</link> name.
     The test implementor may choose the syntax of target group names in
     a test implementation.  Target groups may be used to encode
     information about target attributes, such as architecture and
     operating system, and capabilities.</para>
    </listitem>

    <listitem>
     <para>A <firstterm
     id="def-target-concurrency">concurrency</firstterm> value, which
     must be a positive integer.  Most target classes support concurrent
     execution of multiple tests on the target.  This number allows the
     target specification to control how many tests are executed
     simultaneously.</para>
    </listitem>

    <listitem>
     <para>Optionally, a target specification may include additional
     properties.  Properties are named and have string values.  Some
     target classes may use property information to control their
     configuration.  For instance, a target class which executes tests
     on a remote computer would extract the network address of the
     remote computer from a target property.</para>
    </listitem>
   </orderedlist>

  </section> <!-- sec-target-specifation -->

  <section id="sec-target-files">
   <title>Target Files</title>

   <para>In a <firstterm id="def-target-file">target file</firstterm>,
   you specify the computers or other test targets on which &qmtest; runs
   tests.  Use the <link
   linkend="opt-test-run-targets"><option>&dashdash;targets</option>
   (<option>-T</option>) option</link> to the <command>&qmtest-cmd;
   run</command> command to specify the target file.</para>

   <para>A target file is an XML document containing elements
   representing <link linkend="sec-target-specification">target
   specifications</link>.  The document type is
   <literal>-//Software&nbsp;Carpentry//QMTest&nbsp;Target&nbsp;V0.1//EN</literal>,
   and the document element is <sgmltag
   class="element">targets</sgmltag>.</para>

   <para>Each target specification is represented by a 
   <sgmltag class="element">target</sgmltag> element, and includes
   <sgmltag class="element">name</sgmltag>, 
   <sgmltag class="element">class</sgmltag>, 
   <sgmltag class="element">group</sgmltag>, and 
   <sgmltag class="element">concurrency</sgmltag> elements.  Additional
   <sgmltag class="element">property</sgmltag> elements may provide
   target properties.</para>

   <para>For example, the following target file specifies two targets
   for running tests.</para>

   <programlisting>
<![CDATA[<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE targets PUBLIC "-//Software Carpentry//QMTest Target V0.1//EN" "http://www.software-carpentry.com/qm/xml/target.dtd">
<targets>
 <target>
  <name>local</name>
  <class>qm.test.run.SubprocessTarget</class>
  <group>i386-pc-linux-gnu</group>
  <concurrency>1</concurrency>
 </target>
 <target>
  <name>remote</name>
  <class>qm.test.run.RemoteShellTarget</class>
  <group>sparc-sun-solaris2.5.1</group>
  <concurrency>2</concurrency>
  <property name="host">sunshine</property>
  <property name="arguments">-l test</property>
 </target>
</targets>
]]>
  </programlisting>

  <para>The first target is the <link
  linkend="sec-subprocess-target">local</link> Linux computer.  The
  second target is a remote computer running SPARC Solaris.  &qmtest;
  invokes tests on the remote target using a <link
  linkend="sec-remote-shell-target">remote shell</link> invocation.  The
  remote computer's name is "sunshine", and two tests are run
  concurrently on that target.</para>

  </section> <!-- sec-target-files -->

  <section id="sec-target-classes">
   <title>Target Classes</title>

   <para>&qmtest; includes these target class implementations.</para>

   <section id="sec-subprocess-target">
    <title>Local Subprocess Target</title>

    <para>The <classname>qm.test.run.SubprocessTarget</classname> target
    class runs tests in one or more subprocesses on the local computer
    (the computer on which the &qmtest-cmd; command is invoked).  The
    number of subprocesses is the degree of concurrency specified for
    the target.</para>

   </section> <!-- sec-subprocess-target -->

   <section id="sec-remote-shell-target">
    <title>Remote Shell Target</title>

    <para>The <classname>qm.test.run.RemoteShellTarget</classname>
    target class runs tests on a remote computer via a remote shell
    invocation (<command>rsh</command>, <command>ssh</command>, or
    similar).  This target uses a remote shell to invoke a program
    similar to the &qmtest-cmd; command on the remote computer.  This
    remote program accepts test commands and responds with results from
    running these tests.</para>

    <para>To use <classname>RemoteShellTarget</classname>, the remote
    computer must have &qmtest; installed, and must contain an identical
    copy of the test database.  &qmtest; does not transfer entire tests
    over the remote shell connection; instead, it relies on the remote
    test database for loading tests.</para>

    <para>In addition, the remote shell program must be configured to
    allow a remote login without additional intervention (such as typing
    a password).  If you use <command>rsh</command>, you can use an
    <filename>.rhosts</filename> file to set this up.  If you use
    <command>ssh</command>, you can use an SSH public key and the
    <command>ssh-agent</command> program for this.  See the
    corresponding manual pages for details.</para>

    <para>The concurrency value of the target specification controls the
    number of concurrent tests to run on the remote host.  The number of
    processes used on the remote host is one (the controlling process)
    plus the concurrency value.</para>

    <para>The <classname>RemoteShellTarget</classname> target class
    takes its configuration from the following target properties:</para>

    <itemizedlist>
     <listitem>
      <para>The <property>remote_shell</property> property specifies the
      path to the remote shell program.  If omitted, the configuration
      variable <property>remote_shell</property> is used instead.  If
      neither is specified, the default is
      <filename>/usr/bin/ssh</filename>.  The remote shell program must
      accept the same command-line syntax as
      <command>rsh</command>.</para>
     </listitem>

     <listitem>
      <para>The <property>host</property> property specifies the remote
      host name.  If omitted, the target name is used.</para>
     </listitem>

     <listitem>
      <para>The <property>database_path</property> property specifies
      the path to the test database on the remote computer.  The test
      database must be identical to the local test database.  If
      omitted, the local test database path is used.</para>
     </listitem>

     <listitem>
      <para>The <property>arguments</property> property specifies
      additional command-line arguments for the remote shell program.
      The value of this property is split at space characters, and the
      arguments are added to the command line before the name of the
      remote host.</para>

      <para>For example, if you are using the <command>ssh</command>
      remote shell program and wish to log in to the remote computer
      using a different user account, specify the <literal>-l
      username</literal> option using the <property>arguments</property>
      property.</para>
     </listitem>

     <listitem>
      <para>&qmtest; uses the remote shell to invoke the
      <command>qmtest_remote</command> program on the remote host.  This
      program is installed by default in
      <filename>/usr/local/bin/qmtest_remote</filename>.  You may
      override this and use a version in a different place by specifying
      the <property>qmtest_remote</property> property.</para>
     </listitem>
    </itemizedlist>

   </section> <!-- sec-remote-shell-target -->

  </section> <!-- sec-target-classes -->

 </section> <!-- sec-ref-targets -->

 <section id="sec-ref-writing-database-classes">
  <title>Writing a Database Class</title>

  <para>The database class controls the format in which tests are
  stored.  &qmtest's default database class stores each test as an XML
  file, but you might want to use a format that is particularly well
  suited to your application domain or to your organization's
  arrangment of computing resources.</para>

  <para>For example, if you were testing a compiler, you might want to
  represent tests as source files with special embedded comments
  indicating what errors are expected when compiling the test.  You
  could write a test database class that can read and write tests
  in that format.</para>

  <para>Or, if you wanted to share a single test database with many
  people in such a way that everyone automatically saw updates to the
  database, you might want to put all of the tests on a central HTTP
  server.  You could write a test database class that retrieves tests
  from the server and creates new tests by uploading them to the
  server.</para>

  <para>A test database class is a Python class that is derived from
  <classname>qm.test.base.Database</classname>.  You must define
  methods that handle retrieving a test from the database, writing a
  test to the database, and other related tasks.  Read the code for
  <classname>qm.test.base.Database</classname> to see what methods
  need to be overridden.
  </para>
  
  <para>To use your new database class, create a file called
  <filename>configuration</filename> in the directory containing 
  your test database.  This file should look like:
   <programlisting>
<![CDATA[<?xml version='1.0'?>
<!DOCTYPE tdb-configuration PUBLIC "-//Software Carpentry//QMTest TDB Configuration V0.1//EN" "http://www.software-carpentry.com/qm/xml/tdb_configuration.dtd">
<tdb-configuration>
  <class_name>mydatabase.Database</class_name>
</tdb-configuration>
]]>
  </programlisting>
  Replace <classname>mydatabase.Database</classname> with the name of
  your database class, including the module in which it is
  located.</para>
  
 </section> <!-- sec-ref-writing-database-classes -->

</chapter>
<!--
  Local Variables:
  mode: sgml
  indent-tabs-mode: nil
  sgml-indent-step: 1 
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  sgml-parent-document: ("manual.xml" "book" "chapter")
  End:
-->
