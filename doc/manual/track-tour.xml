<?xml version="1.0"?>
<!--

  File:   track-tour.xml
  Author: Alex Samuel
  Date:   2001-08-02

  Contents:
    Grand tour/tutorial of QMTrack.

  Copyright (C) 2001, 2002 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<chapter id="chap-track-tour">
 <title>Getting Started with &qmtrack;</title>
 
 <para>This chapter will help you get &qmtrack; up and running by
 showing you how to create and configure an issue database, and perform
 basic operations.</para>

 <para>The sections on issue database configuration are primarily of
 interest to administrators and maintiners; users can skip directly to
 the the <link linkend="chap-track-manual">users manual</link> to
 learn how to work with &qmtrack; once it has been set up.</para>

 <section id="sec-tracktut-idb">
  <title>Creating an &idb;</title>

  <para>&qmtrack; stores information about bugs and other issues in an
  issue database (&idb;).  Before you begin using &qmtrack;, you must
  instruct it to create and initialize a new &idb;.</para>

  <para>To initialize an empty &idb;, invoke:</para>

  <screen>
&prompt;<userinput>qmtrack --idb <replaceable>path</replaceable> initialize</userinput> 
  </screen>

  <para>&qmtrack; creates a new &idb; at the
  <replaceable>path</replaceable> you specified, and prints some
  explanatory information.  The &idb; is a directory containing various
  files that &qmtrack; uses to store configuration information and the
  issues themselves.</para>

  <para>Once you've initialized a new &idb;, you must let &qmtrack; know
  where it is.  To do this, either set the environment variable
  <envar>QMTEST_IDB_PATH</envar> to the &idb; path, or specify the
  <option>&dashdash;idb</option> (<option>-D</option>) option when you
  invoke the &qmtrack-cmd; command.</para>

 </section> <!-- sec-tracktut-idb -->

 <section id="sec-tracktut-user-db">
  <title>Configuring Users</title>

  <para>When &qmtrack; created the new &idb;, it included a user
  database file.  This file specifies information about the &qmtrack;'s
  user accounts, since &qmtrack; doesn't automatically use the user
  accounts on your system.  The default user database contains a single
  user account named "guest", which is the default account that it used
  when accessing &qmtrack; through its Web user interface.</para>

  <para>To create additional user accounts, you must modify the user
  database file by hand.  The database file is named
  <filename>users.xml</filename>, and is in the directory that &qmtrack;
  made at the &idb; path you specified.  The user database file is an
  XML file.</para>

  <para>To create a new user, add a paragraph similar to this
  one:</para>

   <programlisting>
<![CDATA[ <user id="johndoe" disabled="no">
  <info>
   <property name="name">John Doe</property>
   <property name="email">john@doe.org</property>
  </info>
  <authentication>
   <property name="password">!h@rd2guesSs</property>
  </authentication>
 </user>
]]></programlisting>

  <para>You should also add at least one user to the "administrators"
  group.  Only users in this group are allowed to change the &idb;
  configuration.  To add a user to the "administrators" group, add a
  line to the administrators <sgmltag class="element">group</sgmltag>
  element, so that it looks similar to this:</para>

  <programlisting>
<![CDATA[ <group id="administrators">
  <user-id>johndoe</user-id>
 </group>
]]></programlisting>

  <para>Specify a user ID of one of the users in your user database
  instead of "johndoe".  You may add more than one user to the
  "administrators" group, if you wish.</para>

  <para>See <xref linkend="sec-user-database"/> for more information
  about the user database.</para>

 </section> <!-- sec-tracktut-user-db -->

 <section id="sec-tracktut-configuration">
  <title>Configuring the Issue Database</title>

  <para>&qmtrack; provides a Web-based interface for configuring an
  issue database, via a built-in Web server.  You configure an issue
  database by starting the configuration Web server and pointing your
  browser at it.  While the configuration server is running, you may not
  interact with the issue database in other ways.</para>

  <para>To start the configuration server, use the
  <command>&qmtrack-cmd; configure</command> command.  Specify the TCP
  port number on which to run the server with the
  <option>&dashdash;port</option> (<option>-P</option>) option.  Don't
  forget to specify the path to the &idb;.</para>

  <para>For example, if you created an &idb; at the path
  <filename>~/idb</filename>, run the &qmtrack; server on port 8000 by
  invoking:</para>

  <screen>&prompt;<userinput>QMTRACK_DB_PATH=~/idb</userinput>
&prompt;<userinput>exporrt QMTRACK_DB_PATH</userinput>
&prompt;<userinput>qmtrack configure -P 8000 -b</userinput>
  </screen>

  <para>The <option>&dashdash;start-browser</option>
  (<option>-b</option>) option instructs &qmtrack; to attempt to open a
  browser window and point it at the server.  If you do not specify this
  option, &qmtrack; prints out the URL at which the server is running;
  you should open a browser window yourself and point it at this URL.
  (If &qmtrack; has trouble opening a web browser automatically on your
  system, see <xref linkend="sec-rc-common"></xref> for information on
  configuring it correctly.)</para>

 </section> <!-- sec-tracktut-configuration -->

 <section id="sec-tracktut-issue-class">
  <title>Creating an Issue Class</title>

  <para>You must perform one additional step before using &qmtrack; to
  track bugs and issues.  To use an &idb;, you must create an issue
  class, which specifies the information stored for each issue.  An
  issue class is like a blank form that includes preprinted fields.
  When you create or modify an issue, you specify the values for these
  fields.</para>

  <para>&qmtrack; allows you to use more than one issue class in your
  &idb;.  However, for simple cases, one issue class is generally
  sufficient.  If later you find you need more than one, simply repeat
  the steps here to create additional issue classes.</para>

  <para>To create an issue class, you must log in to the &qmtrack; Web
  interface with a user account in the "administrators" group.  Enter
  the user name and password on the left side of the main &qmtrack;
  page, and click on the <guibutton>Log In</guibutton> button.  If you
  configured your user database correctly, the main &qmtrack; page
  should now include a category labelled
  <guilabel>Administrative</guilabel> in the bottom right, including a
  <guibutton>Configure IDB</guibutton> button.  Click on this button
  to start configuring your &idb;</para>

  <para>From the <guilabel>Configure Issue Database</guilabel> page,
  select the <guibutton>Add a New Class</guibutton> button.  Enter a
  name and title for your issue class.  The name is used internally by
  &qmtrack;, while the title will be visible to users.  Both may be the
  same.  For example, specify "bug" for both.  The
  <guilabel>Categories</guilabel> control allows you to specify a list
  of names for categorizing your issues.  A category is simply a
  non-exclusive set of issues; i.e. an issue may belong to zero, one, or
  more categoires.  If you're happy with the default category names
  provided by &qmtrack;, simply leave them.  When you're all done, click
  on the <guibutton>Create</guibutton> button.</para>

  <para>&qmtrack; returns you to the <guilabel>Configure Issue
  Database</guilabel> page, which now shows your new issue class.  Click
  on its <guibutton>Edit</guibutton> button to examine its details.
  You'll notice that &qmtrack; has included a several fields
  automatically; these fields are included in all issue classes, and
  cannot be deleted.  From this page, you can add additional fields,
  modify the settings of existing fields, and configure other special
  features.  When you're done, be sure to click on the <guibutton>Commit
  Changes</guibutton> button at the bottom of the form; &qmtrack; does
  not change the issue class until you do this.</para>

  <para>When you are done editing your issue class, click on the
  <guilabel>Main Page</guilabel> link on the title bar at the top of the
  page to return to the main page.</para>

 </section> <!-- sec-tracktut-issue-class -->

 <section id="sec-tracktut-adding-fields">
  <title>Adding Fields</title>

  <para>&qmtrack; includes several fields in every issue class.  These
  are added automatically when you create the issue class.  Some of
  these fields contain general information that's useful for any kind of
  issue; others are for &qmtrack;'s internal use.</para>

  <para>The most important is the "Issue ID" field.  This contains a
  unique issue ID (&iid;) &dashdash; a short string which identifies the issue.
  Each's issue's &iid; is unique in the issue database.</para>

  <para>Another important field added by &qmtrack; is the "Summary"
  field.  This field contains a short summary of each issue.  When a
  &qmtrack; presents a table of several issues (for instance, when
  displaying the results of a query), these summaries help the user
  identify the gist of each issue.</para>

  <para>The "Modifying User" and "Modification Time" fields store the
  user ID of the user who last modified the issue and the time at which
  this modification was made, respectively.  When you browse the
  revision history of an issue, these fields display the user who
  made each revision, and the time the revision was made,
  respectively.</para>

  <para>You may wish to add fields to your issue class.  To do so, click
  on the <guibutton>Add a New Field</guibutton> button.  Specify the
  name of the field (this is &qmtrack;'s internal name, not the name
  that will be presented to the user; you can specify the latter
  afterwards) and the field's type.  &qmtrack; represents field types by
  Python classes.  Generally, you will choose one of &qmtrack;'s
  built-in field types from the drop-down list, which represent the most
  common data types used in issue tracking.  Most fields are
  single-valued, but you may create a set field, which contains an
  arbitrary number of values of the specified type, by selecting the
  appropriate radio button.</para>

  <para>Once you specify the field name and type, click
  <guibutton>OK</guibutton>.  &qmtrack; creates the field, and takes you
  to the field editing page, from which you can customize the field you
  just created.  Here, you may specify the title by which this field
  appears to users and a longer description of the field's purpose, and
  adjust other settings.</para>

  <para>Here are some suggestions of fields you may wish to add to your
  issue class:</para>

  <itemizedlist>
   <listitem>
    <para>The "Summary" field takes a single line of descriptive text
    only.  You may wish to add another field to contain a longer
    description of each issue.  Use a field name "description" and a
    field type "text field"
    (<classname>qm.fields.TextField</classname>).</para>

    <para>In the field editing page, set the field's title to
    "Description".  If the field will contain mostly English text, set
    the "structured" attribute to true.  If the field will contain
    mostly code listings, formatted output, or screen dumps, set the
    "verbatim" attribute to true.</para>

    <para>You may wish to require users of your issue database to
    provide a description of each issue.  If you set the
    <literal>not_empty_text</literal> attribute to true, &qmtrack; will
    not allow the submission of an issue without a value for the
    "Description" field.</para>
   </listitem>
  
   <listitem>
    <para>&qmtrack; allows you to add a field for storing arbitrary file
    attachments with each issue.  Use a field name "attachments" or
    similar, and specify the field type "attachment field"
    (<classname>qm.fields.AttachmentField</classname>).  So that an
    issue may include more than one file attachment, specify that the
    field should be a set field.</para>

    <para>In the field editing page, set the title to "File
    Attachments", and add an explanatory description suggesting the
    types of file attachments that users of &qmtrack; might add to an
    issue.</para>
   </listitem>
  </itemizedlist>

  <para>Once you're done adding fields and adjusting their
  configurations, don't forget to click on the <guibutton>Commit
  Changes</guibutton> button at the bottom of the issue class form.
  &qmtrack; will not actually modify your issue class until do
  this.</para>

 </section> <!-- sec-tracktut-adding-fields -->

 <section id="sec-tracktut-special-features">
  <title>Special Issue Class Features</title>

  <para>&qmtrack; provides some special features to help you make the
  best use of your issue database.  These features can be configured for
  each issue class individually.  To do so, click on the
  <guibutton>Edit</guibutton> button for an issue class from the
  &idb; configuration page.  The form contains a section
  <guilabel>Special Features</guilabel> from which you can access
  them.</para>

  <glosslist>
   <glossentry>
    <glossterm>Notification</glossterm>
    <glossdef>
     <para>&qmtrack;'s notification feature causes an email message to
     be sent when an issue is created or modified.  You may specify the
     recipients of the notification message, and also specify the
     conditions under which the message is to be sent.</para>

     <para>Click on the <guibutton>Configure</guibutton> button for
     the notification feature to configure email notification for all
     issues in that issue class.  &qmtrack; shows you a form from which
     you may specify both ordinary Internet email addresses and
     &qmtrack; user IDs for recipients of the notification
     messages.</para>

     <para>Note that &qmtrack; will send notification messages to a user
     whose IDs you specify only if that user has an email address
     configured in the <link linkend="sec-user-database">user
     database</link>.</para>

     <para>You may also specify a condition under which to send
     notification messages.  The condition is in the form of a Python
     expression, just like the Python expressions used for specifying
     queries.  If the condition evaluates to true for the modified
     issue, the email notification is sent.</para>

     <para>For example, the condition "<literal>state == 'active' and
     len(summary) == 0</literal>" specifies that email notification
     should be sent whenever the modified issue's state is "active" and
     the length of the issue's summary is zero (i.e. the summary is
     empty).  Note that in the condition expression, the names of fields
     ("state" and "summary"), not their user-visible titles ("State" and
     "Summary"), must be used.</para>

     <para>The Python expression "<literal>1</literal>" always has a
     true result, so specify this to send email notification whenever an
     issue changes.</para>
    </glossdef>
   </glossentry>

   <glossentry>
    <glossterm>Subscription</glossterm>
    <glossdef>
     <para>&qmtrack; also allows users to subscribe to specific issues.
     In contrast to the notification feature, in which a fixed list of
     recipients is notified whenever any issue changes, the subscription
     feature stores a list of interested subscribers for each issue.
     Optionally, you may configure the issue class to subscribe a user
     to an issue automatically when the user modifies that issue.</para>

     <para>Click on the <guibutton>Configure</guibutton> button for
     the subscription feature to configure it.  &qmtrack; shows you a
     form from which you may specify the condition under which the
     notification email is sent.  The semantics of this field are
     identical to those for the condition field of the notification
     feature, above.</para>

     <para>In addition, you may specify a similar condition under which
     a user who modifies an issue is subscribed automatically.  This
     condition is also a Python expression, and the user is subscribed
     if it evaluates to a true value for the modified issue.  For
     example, specify "<literal>1</literal>" to subscribe the user
     always, or "<literal>0</literal>" to disable automatic
     subscription.  As with the notification condition, you may specify
     more complicated expressions involving field values of the modified
     issue.  For instance, the condition "<literal>user not in ['guest',
     'admin', 'system']</literal>" subscribes the user automatically
     unless the user happens to be one of "guest", "admin", or
     "system".</para>

     <para>&qmtrack; stores the list of user IDs of subscribers to an
     issue in an ordinary issue field, named "subscribers".  You may
     choose to hide this field when an issue is displayed; in this case,
     users will not be able to view the subscriber list or modify it
     directly (though automatic subscriptions will still be
     processed).</para>
    </glossdef>
   </glossentry>

   <glossentry>
    <glossterm>Discussion</glossterm>
    <glossdef>
     <para>&qmtrack; supports a special kind of text field for tracking
     an ongoing discussion about an issue.  Such a discussion field
     is handy for displaying follow-up comments added by users who
     modify an issue.  When a user modifies the contents of an ordinary
     text field in an issue, the modified contents replace the previous
     ones.  With a discussion field, however, the text added with each
     revision is added to the end of the discussion, rather than
     replacing it.</para>

     <para>To add a discussion field, simply click on the
     <guibutton>Add</guibutton> button for the discussion feature.
     &qmtrack; immediately adds a field named "discussion".</para>
    </glossdef>
   </glossentry>
  </glosslist>

 </section> <!-- sec-tracktut-special-features -->

 <section id="sec-tracktut-server">
  <title>Starting the Server</title>

  <para>&qmtrack; provides a Web-based user interface and remote access
  capabilities through a built-in Web server.  While &qmtrack; does
  support a command-line interface, you can perform most tasks,
  including configuration, from the Web interface.</para>

  <para>Start the main Web user interface with the <command>qmtrack
  server</command> command.  The options to this command are similar to
  those of the configuration server command, <command>&qmtrack-cmd;
  configure-idb</command>, described in <xref
  linkend="sec-tracktut-configuration"/>.  If you do not specify an
  address or port, &qmtrack; will automatically pick a port on your
  local machine.  Remember to specify the path to the &idb; with the
  <option>-D</option> option.</para>

  <para>If you specify the <option>&dashdash;start-browser</option>
  (<option>-b</option>) option, &qmtrack; will open a browser window and
  connect to the Web user interface.  Otherwise, &qmtrack; prints the
  appropriate URL, and you may connect to the URL yourself.</para>

 </section> <!-- sec-tracktut-server -->

</chapter>
<!--
  Local Variables:
  mode: sgml
  indent-tabs-mode: nil
  sgml-indent-step: 1 
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  sgml-parent-document: ("manual.xml" "book" "chapter")
  End:
-->
