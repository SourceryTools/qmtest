<?xml version="1.0" standalone="yes"?>

<Doc style="sapcat" abbrevs="sapcat_abbrevs">
<title>SapCat: Development Plan</title>
<h1>SapCat: Development Plan</h1>

<contents/>

<subdoc name="sub">

<h2 key="scDevPlan">Development Plan</h2>
<p>
    As specified by the {:scconfig:} guidelines, {:sapcat:} will be
    implemented mainly in {:python:}.  There are a few components,
    mainly relating to the bootstrap problem, that may be implemented
    in C.
</p>
<p>
    The design presented in Chapter&nbsp;<ref key="scDesign"/> divided
    {:sapcat:} into a number of different modules.  Work could be
    divided amongst several developers along these boundaries.
    Indeed, {:sapcat:} is a large enough system that several
    developers will be needed.  Should we be unsuccessful in getting
    additional developers, our plan is to offer a {:python:} course
    and recruit students to help develop it.
</p>


<h3>Phase 1</h3>
<p>
    Our initial focus will be implementing the <q>essential</q> use
    cases.  A realization of the {:scPDD:} must first be chosen, since
    this component is so central to the rest of {:sapcat:}.  The
    abstract generic interface, and an XML implementation, can
    probably be constructed in a couple of days (including a
    rudimentary test framework).
</p>
<p>
    The {:scSCAN:}, {:scADAPT:} and {:scLANG:} modules are pretty
    simple.  Language support for simple template files (substituting
    <code>@SYM@</code>, like {:autoconf:}) can be designed pretty
    quickly.  Similarly, a prototypical {:scPD:} can be constructed
    quickly.
</p>
<p>
    With the addition of a simple versions of the {:scMGR:},
    {:scBUILD:}, and {:scTD:}, we should have a working prototype of
    {:sapcat:}.  With a single programmer working part-time, it should
    take a month or three to complete this phase.
</p>

<h3>Phase 2</h3>
<p>
    After a working prototype has been developed, it needs to be
    <q>polished</q> into production code.  The {:scTD:} needs to
    include caching; the {:scSCAN:} and {:scADAPT:} modules need to be
    enhanced to work with C header files, and the {:scBUILD:} needs to
    developed to work with <code>Makefile</code>s.  During this time,
    the {:scPD:} system will also be expanded.
</p>

<h3>Phase 3</h3>
<p>
    After the command line version of {:sapcat:} is working well, it
    is time to add the {:gui:} version.  Initially, this will invoke
    individual {:sapcat:} operations from the command line version.
    But once this work, the wizard dialog needs to be developed.
</p>
<p>
    After the {:gui:} is functional, remaining features can be
    implemented.
</p>



<h3>Testing Methodology</h3>
<p>
    There are several ways to approach testing with {:sapcat:}.
    First, each module will be equipped with internal consistency
    checks that can be invoked as desired by the {:sapdev:}.
    Secondly, there will be regression tests designed for the modules.
</p>
<p>
    The most difficult aspect of testing is the probe database.  The
    testing of the module code itself can be arranged through a
    regression test, but the actual probes give results that
    necessarily vary by platform.  However, we should be able to
    design a way to execute every available probe on a platform,
    recording the results.  These results can be regression-tested
    against that platform.  With the help of a distributed team of
    {:sapcat:} testers, we should be able to get pretty wide coverage
    of platforms.  If nothing else, being able to view all probe
    results can be helpful in determining whether or not a probe
    actually works.
</p>
<p>
    Finally, {:softdevs:} may need to add new probes.  {:sapcat:} will
    provide a way for individual probes (and their prerequisites) to
    be run, so that the developer can verify that it is working
    correctly.
</p>

</subdoc>
<!-- Local Variables: -->
<!-- mode: xml -->
<!-- End: -->
</Doc>
