<?xml version="1.0" standalone="yes"?>

<Doc style="sapcat" abbrevs="sapcat_abbrevs">
<title>SapCat: Appendix: Open Decisions</title>
<h1>SapCat: Appendix: Open Decisions</h1>

<contents/>

<subdoc name="sub">
<appendix key="scDecisions">Open Decisions</appendix>

<p>
    This section discusses some of the remaining design decisions for
    {:sapcat:}.  We will add to it as new details arise, and remove
    things from it as the final design is fleshed out.  We may also
    use this section to document the reasons for our decisions.
</p>

<h3>Interoperation with {:scbuild:}</h3>
<p>
    We must be able to interoperate with the {:scbuild:} tool.  This
    can obviously be done by creating {:scbuild:} scripts, much as we
    plan to build Makefiles.  However, the major reason for having a
    separate build tool is that we may have systems whose build
    scripts can be described using the {:scbuild:} syntax but which
    are too complex to be created using the data in the {:scPDD:}.
</p>
<p>
    The key question is, <q>Which tool is in control?</q> People who
    are comfortable with {:automake:} will naturally want {:sapcat:}
    in control.  However, other people are comfortable with their
    build scripts, using {:autoconf:} only.  These people will want a
    way to put the {:scbuild:} tool in control.
</p>
<p>
    This suggests that we need to be able to invoke {:sapcat:} to get
    a list of files that must be scanned for probe symbols, as well as
    provide additional probe symbols.  This functionality should not
    be difficult to add, since it amounts to merely additional
    interfaces to functions we need to implement anyway.  However,
    these interfaces are not likely to have GUIs.
</p>
<p>
    We also need to investigate the possibility of code-sharing
    between {:sapcat:} and the {:scbuild:} system.
</p>

<h3>Package Description Database</h3>
<p>
    We have started a design for the {:scPDD:}.  This database
    describes each of the source objects in the package, as well as
    the products of building the package.  Options specifying
    variations on how the package is to be built are also described in
    this database.  Furthermore, any information needed to construct
    {:rpm:} or other installation packages must be described in the
    {:scPDD:}.  We need to finish this design.
</p>
<p>
    There are a number of things we have to decide.  One is the syntax
    of the {:scPDD:}.  In our original proposal, we used a Python-like
    description file.  There may also be attractive reasons for using
    an XML format.  We expect this file to be created by {:softdevs:},
    rather than being automatically generate.  While we can provide
    tools to add or modify entries, it is probably helpful if this
    database can be readily read and modified by humans.
</p>
<p>
    Furthermore, while we specify the relationships between sources
    and their targets, we have not specified <em>how</em> to create
    targets from sources.  In many cases, implicit rules are enough
    &mdash; that is why {:automake:} has been so successful.  However,
    sometimes additional rules need to be specified &mdash; that is
    why {:automake:} has been so successful.  How should these rules
    be scripted?  If we use {:python:}, will we encounter the
    <q>bootstrap problem</q>?  We probably do not want to use Bourne
    shell, as this leads to portability problems with {:windows:}.
    This is where we really see overlap with {:scbuild:}.  Indeed, if
    {:scbuild:} is <q>in control</q>, this is no longer our problem.
</p>

<h3>Probe Database</h3>
<p>
    We have also started a design for the {:scPD:}.  Like the
    {:scPDD:}, we expect that human programmers will need to edit the
    files composing this database.  We will need to be able to specify
    scripts, in many case for tests that are similar enough across
    platforms that is should be possible to use a single script to
    specify the probe.  However, because of the <q>bootstrap
    problem</q>, we cannot directly use {:python:} for this scripting.
</p>

</subdoc>
<!-- Local Variables: -->
<!-- mode: xml -->
<!-- End: -->
</Doc>
