<?xml version="1.0"?>
<!--

  File:   core.xml
  Author: Mark Mitchell, Greg Wilson, Alex Samuel
  Date:   2000-11-01

  Contents:
    Core QMTest implementation.

  Copyright (C) 2000 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<chapter id="chap-implementation">
 <title>Implementation</title>
  
 <para>This chapter describes the Python classes that correspond to
 the major &qmtest; <link linkend="chap-concepts">concepts</link>.
 Most of these classes are designed as polymorphic classes that can be
 replaced by users to create customized testing environments.
 Therefore, the information provided here does not go beyond the
 interfaces of these classes; a valid implementation of each class
 must provide at least the functionality described in these
 interfaces.</para>

 <section id="sec-class-Test">
  <title>Class <classname>Test</classname></title>

  <para>Each test class must derive from the
  <classname>Test</classname> class, which has the following
  interface:
   <programlisting><![CDATA[
class Test:
   """A test instance."""

   def __init__(self, id):
       """Initialize this instance.  'id' is the ID for this test."""

   def GetID(self):
       """Return the ID for this instance."

   def Run(self, context):
       """Execute this test.

       'context' -- Information about the environment in which the
       test is being executed.

       returns -- A 'Result' describing the outcome of the test."""
   ]]></programlisting>
  </para>

 </section>

 <section id="sec-class-Suite">
  <title>Class <classname>Suite</classname></title>

  <para>The <classname>Suite</classname> class has the following
  interface:
   <programlisting><![CDATA[
class Suite:
   """A suite of tests."""

   def __init__(self, id): 
       """Initialize this test suite.  

       'id' -- The id for this test suite."""


   def GetTestIDs(self):
       """Return a list of the test IDs of the tests in this suite."""
   ]]></programlisting>
  </para>

 </section>

 <section id="sec-class-Action">
  <title>Class <classname>Action</classname></title>

  <para>Each action class must derive from the
  <classname>Action</classname> class:
   <programlisting><![CDATA[
class Action:
   """Actions to be taken before and after executing a test."""

   
   def __init__(self, id):
       """Create a new instance.  

       'id' -- The ID for this action."""


   def GetID(self):
       """Return the ID of this instance."""


   def Setup(self, context):
       """Execute the setup action.

       Execute the action that should be taken to set up the test
       execution.  Throw an exception if the action cannot be taken.

       'context' -- Information about the environment in which the
       test is being executed."""


   def Cleanup(self, context):
       """Execute the cleanup action.

       Execute the action that should be taken to clean up after
       test execution.  

       'context' -- Information about the environment in which the
       test is being executed."""  
   ]]></programlisting>
  </para>

 </section>

 <section id="sec-class-Database">
  <title>Class <classname>Database</classname></title>

  <para>The <classname>Database</classname> class has the following
  interface:
   <programlisting><![CDATA[
class Database:
   """A test database."""

   
   def GetTestInstance(self, id):
       """Return the 'Test' associated with the indicated ID.  

       returns -- 'None' if the indicated ID is not present in the
       database."""


   def GetActionInstance(self, id):
       """Return the 'Action' associated with the indicated ID.  

       returns -- 'None' if the indicated 'Action' is not present in
       the databse."""


   def GetSuiteInstance(self, id):
       """Return the 'Suite' associated with the indicated ID.  

       returns -- 'None' if the indicated 'Suite' is not present in
       the database."""


   def GetTestIds(self):
       """Return the IDs of all tests present in the indicated database."""


   def GetSuiteIds(self):
       """Return the IDs of all suites present in the indicated database."""


   def GetActionIds(self):
       """Return the IDs of all actions present in the indicated database."""
   ]]></programlisting>
  </para>

 </section>

 <section id="sec-class-Engline">
  <title>Class <classname>Engine</classname></title>

  <para>The <classname>Engine</classname> class has the following
  interface:
   <programlisting><![CDATA[
class Engine:
   """A test execution engine."""


   def ExecuteTest(self, database, properties, testid):
       """Execute a test.

       'testid' -- The ID of the test to execute.  

       'database' -- The test database from which to retrieve the test.

       'properties' -- A mapping from string keys to values that will
       be available while the test is executing."""


   def ExecuteTests(self, database, properties, testids):
       """Execute several tests.

       'testid' -- A sequence of IDs of the tests to execute.

       'database' -- The test database from which to retrieve the tests.

       'properties' -- A mapping from string keys to values that will
       be available while the tests are executing."""


   def ExecuteSuite(self, database, properties, suiteid):
       """Execute a test suite.

       'suiteid' -- The ID of the suite to execute.

       'database' -- The test database from which to retrieve the suite.

       'properties' -- A mapping from string keys to values that will
       be available while the suite is executing."""
    ]]></programlisting>
   </para>

  </section>

 <section id="sec-class-Context">
  <title>Class <classname>Context</classname></title>

  <para>An instance of the <classname>Context</classname> class is
  passed to each test when it is run.  By examining the context
  object, the test can obtain configuration parameters provided by the
  tester, such as the current machine architecture, or optional
  arguments to provide to the tested program, or the paths to programs
  that must be invoked.</para>

  <para>The <classname>Context</classname> class has the following
  interface:
   <programlisting><![CDATA[
class Context:
   """Information about the context in which the tests are being
   executed."""


   def GetPropertyValue(self, key):
       """Return the value associated with 'key'."""


   def GetProperties(self):
       """Return a mapping of all of the key-value pairs."""
   ]]></programlisting>
  </para>

 </section>

 <section id="sec-default-database">
  <title>Test Database: Default Implementation</title>

  <para>The <link linkend="concept-database">test database</link> is
  responsible for mapping test IDs to test instances.  The way in
  which a test database does this will differ on the database in use,
  and much of the power of &qmtest; comes from the ability to provide
  specialized test databases.  This section describes the default test
  database implementation provided with &qmtest;.  The next section
  provides an example of a specialized test database that could be
  used to deal with test specifications in a form other than provided
  here.</para>

  <section id="sec-data-storage">
   <title>Data Storage</title>

   <para>The physical database will consist of a directory in the
   filesystem, together with its subdirectories and the files
   contained in all of these directories.  Each file within this
   directory hierarchy that ends with the extension
   <filename>.qmt</filename> contains exactly one test specification.
   The file whose path is given by
   <filename>foo/bar/baz.qmt</filename> relative to the root of the
   database will have the test ID "foo.bar.baz".  (By using a
   particular extension for test files, desktop environments can
   associate particular icons with test files.  Using a particular
   extension, together with the requirement that there be only one
   test per file, means that both locating a particular test in the
   database and enumerating all the tests in the database are speedy
   operations.)</para>

  </section>

  <section>
   <title>Test Specifications</title>

   <para>The test specifications themselves will be represented as
   &xml;, using the &dtd; presented in <xref
   linkend="fig-test-dtd"/>.</para>

   <figure id="fig-test-dtd">
    <title>&dtd; for test specitication</title>
    <programlisting><![CDATA[
<!ELEMENT test
    ( class, 
      ( argument | category | prerequisite | preaction | postaction )* 
    )
>

<!ELEMENT class (#PCDATA)>

<!ELEMENT argument (#PCDATA)>
<!ATTLIST argument
    name CDATA #REQUIRED
    type ( expression | text ) #IMPLIED
>

<!ELEMENT category (#PCDATA)>

<!ELEMENT prerequisite (#PCDATA)>

<!ELEMENT preaction (#PCDATA)>

<!ELEMENT postaction (#PCDATA)>
    ]]></programlisting>
   </figure>

   <para>The formal public identifier for this &dtd; is
    <programlisting>
     "-//Software Carpentry//DTD QMTest V0.1//EN"
    </programlisting>
   </para>

   <para>For example, suppose that Diana Dowhile's compiler crashes
   when given the following input:
    <programlisting>
int main ()
{
  volatile int x = 2;
  return x - 2;
}   
    </programlisting>
   Diana determines that the test case causes the compiler to crash
   only when the <literal>-fpic</literal> flag is provided to the
   compiler.  Diana might use the test specification presented in
   <xref linkend="example-xml-test"/>.</para>

   <example id="example-xml-test">
    <title>&xml; representation of test</title>
    <programlisting><![CDATA[
<?xml version="1.0"?>
<!DOCTYPE test PUBLIC "-//Software Carpentry//DTD QMTest V0.1//EN">
<test>
 <class>Compile</class>
 <argument name="input" type="text">
<![CDATA[
int main ()
{
  volatile int x = 2;
  return x - 2;
}]]>
]]&gt;<![CDATA[
 </argument>
 <argument name="flags">'-fpic'</argument>
 <category>C</category>
 <category>PIC</category>
</test>
    ]]></programlisting>
   </example>

   <para>This specification indicates that the test class to be used
   is the <literal>Compile</literal> class.  This class takes two
   arguments: the text of a program to compile, and the flags to use
   when compiling the test program.  When the instance is executed,
   the program test will be written to a temporary file, and the
   compiler will be run.  The test specification also indicates that
   the test is in two particular categories.  The "C" categorization
   indicates that this test exercises the C programming language
   components of teh compiler; if Diana wishes to test only C, as
   opposed to C++ or Fortran programs, she could indicate that by
   asking &qmtest; to run only those tests in the "C" category.  The
   "PIC" categorization indicates that the test tests the
   <literal>-fpic</literal> option; after a change to the code that
   deals with this option, she could choose to rerun only those tests
   in the "PIC" category.</para>

  </section>

  <section>
   <title>Test Classes</title>
 
   <para>Each test specification indicates the test class to which it
   belongs.  In order to instantiate that test class, the database
   must locate the Python code for that test class.  The test database
   will search for a corresponding <filename>.py</filename> or
   <filename>.pyc</filename> file in the following directories in
   order to find the test class:
    <itemizedlist>
     <listitem>
      <para>The directories provided in the
      <envar>QMTEST_CLASSPATH</envar> environment variable.  This
      environment variable will use the same syntax as the
      <envar>PATH</envar> environment variable on the system on which
      &qmtest; is running.</para>
     </listitem>

     <listitem>
      <para>The directory containing the test specification, and its
      parents in the directory hierarchy, stopping at the directory
      that forms the root of the test database.</para>
     </listitem>

     <listitem>
      <para>Those directories containing standard test classes
      provided by &qmtest;.</para>
     </listitem>
    </itemizedlist>
   Note that the directories in the <envar>PYTHONPATH</envar>
   environment variable is not searched, so as to avoid accidentally
   interpreting ordinary Python classes as test classes.</para>

  </section>

  <section>
   <title>Suites</title>

   <para>As mentioned above, each subdirectory of the test database is
   implicitly considered a test suite.  Thus, if there is a directory
   in Diana's database named <literal>parser</literal>, she can run
   all the test in this subdirectory (and the subdirectories within
   it) by asking &qmtest; to run the <literal>parser</literal>
   suite.</para>

   <para>However, test suites do not always naturally form a tree.
   (See the <xref linkend="sec-req-suites"/>.)  Users may specify suites
   in addition to those provided implicitly by the database.  These
   suites a represented by files with the <filename>.qms</filename>
   extension.  Each such file contains the names of tests, given
   relative to the directory containing the <filename>.qms</filename>
   file.  The ID for a test suite is computed in precisely the same
   way as the ID for a test.  A test and a test suite may have the
   same ID.</para>

  </section>

 </section>

 <section id="sec-custom-test-database">
  <title>Test Database: Custom Implementation</title>

  <para>In this section, we show how &qmtest; meets the <link
  linkend="sec-req-spec">requirement</link> that users be able to execute
  tests specified in formats other than &qmtest;'s default &xml;
  format.</para>

  <para>In particular, by creating a specialized test database, Diana
  can reuse <link linkend="story-diana">an extant test suite</link>,
  which consists of C source code with special comments that indicate
  the compiler command-line flags to use when executing particular
  tests.</para>

  <para>Most of the behavior specified by the default test database
  implementation will work as-is, but Diana needs to modify the
  function that maps test IDs to test instances.  Rather than search
  for a <filename>.qmt</filename>, Diana needs to search for a
  <filename>.c</filename> file.  Instead of finding &xml; in the file
  describing the test, she must extract the arguments to the
  <literal>Compile</literal> test class from the special comments in
  the file.  Diana will create her specialized test database class by
  inheriting from the standard class and overriding a method or two.
  Then, by using this alternative test database class, Diana can use
  &qmtest;'s execution and reporting capabilities to execute her
  extant tests.</para>

 </section>
 
</chapter>

<!--
  Local Variables:
  mode: sgml
  indent-tabs-mode: nil
  sgml-indent-step: 1 
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  sgml-parent-document: ("qmtest.xml" "book" "chapter")
  End:
-->
