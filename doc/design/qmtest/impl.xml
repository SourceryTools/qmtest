<?xml version="1.0"?>
<!--

  File:   core.xml
  Author: Mark Mitchell, Greg Wilson, Alex Samuel
  Date:   2000-11-01

  Contents:
    Core QMTest implementation.

  Copyright (C) 2000 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<chapter id="impl"><title>Implementation</title>
  
 <para>This chapter describes the Python classes that correspond to
 the major &qmtest; <link linkend="concepts">concepts</link>.  Most of
 these classes are designed as polymorphic classes that can be
 replaced by users to create customized testing environments.
 Therefore, the information provided here does not go beyond the
 interfaces of these classes; a valid implementation of each class
 must provide at least the functionality described in these
 interfaces.</para>

 <section><title>Class <classname>Test</classname></title>

 <para>Each test class must derive from the
 <classname>Test</classname> class, which has the following interface:
   <programlisting>
<![CDATA[
class Test:
   """A test instance."""

   def __init__(id):
       """Initialize this instance.  ID is the id for this test."""

   def GetID():
       """Returns the ID for this instance."

   def Run(context):
       """Execute this test, returning a Result describing the outcome
       of the test.  The CONTEXT gives information about the
       environment in which the test is being executed."""
]]>
   </programlisting></para>

 </section>

 <section><title>Class <classname>Suite</classname></title>

 <para>The <classname>Suite</classname> class has the following
 interface:
<programlisting>
<![CDATA[
class Suite:
   """A suite of tests."""

   def __init__(id): 
       """Initialize this test suite.  ID is the id for this test
       suite."""

   def GetTestIDs():
       """Returns a list of the test IDs for the tests in this suite."""
]]>
</programlisting>
 </para>

 </section>

 <section><title>Class <classname>Action</classname></title>

 <para>Each action class must derive from the
 <classname>Action</classname> class:
<programlisting>
<![CDATA[
class Action:
   """Actions to be taken before and after executing a test."""
   
   def __init__(id):
       """Initialize this instance.  ID is the id for this action."""

   def GetID():
       """Returns the ID for this instance."

   def Setup(context):
       """Execute the action that should be taken to set up the test
       execution.  Throw an exception if the action cannot be
       taken.  The CONTEXT gives information about the
       environment in which the test is being executed."""

   def Cleanup(context):
       """Execute the action that should be taken to clean up after
       test execution.  The CONTEXT gives information about the
       environment in which the test is being executed."""
]]>
</programlisting>
 </para>

 </section>

 <section><title>Class <classname>Database</classname></title>

 <para>The <classname>Database</classname> class has the following
 interface:
<programlisting>
<![CDATA[
class Database:
   """A test database."""
   
   def GetTestInstance(id):
       """Return the Test associated with the indicated ID.  Returns
       None if the indicated ID is not present in the database."""

   def GetActionInstance(id):
       """Return the Action associated with the indicated ID.  Returns
       None if the indicated Action is not present in the databse."""

   def GetSuiteInstance(id):
       """Return the Suite associated with the indicated ID.  Returns
       None if the indicated Suite is not present in the database."""

   def GetTestIDs():
       """Return the IDs of all tests present in the indicated database."""

   def GetSuiteIDs():
       """Return the IDs of all suites present in the indicated database."""

   def GetActionIDs():
       """Return the IDs of all actions present in the indicated database."""
]]>
</programlisting>
  </para>

 </section>

  <section><title>Class <classname>Engine</classname></title>

  <para>The <classname>Engine</classname> class has the following
  interface:
<programlisting>
<![CDATA[
class Engine:
   """A test execution engine."""

   def ExecuteTest(database, properties, testid):
       """Execute the test with the indicated TESTID from the
       DATABASE.  The PROPERTIES are a list of key-value pairs that
       will be available while the test is executing."""

   def ExecuteTests(database, properties, testids):
       """Execute the tests with the indicated TESTIDs from the
       DATABASE.  The PROPERTIES are a list of key-value pairs that
       will be available while the tests are executing."""

   def ExecuteSuite(database, properties, suiteid):
       """Execute the suite with the indicated SUITEID from the
       DATABASE.  The PROPERTIES are a list of key-value pairs that
       will be available while the tests are executing."""
]]>
</programlisting></para>

  </section>

  <section><title>Class <classname>Context</classname></title>

  <para>An instance of the <classname>Context</classname> class is
  passed to each test when it is run.  By examining the context
  object, the test can obtain configuration parameters provided by the
  tester, such as the current machine architecture, or optional
  arguments to provide to the tested program, or the paths to programs
  that must be invoked.</para>

  <para>The <classname>Context</classname> class has the following
  interface:
  <programlisting>
<![CDATA[
class Context:
   """Information about the context in which the tests are being
   executed."""

   def GetPropertyValue(key):
       """Returns the value associated with the indicated KEY."""

   def GetProperties():
       """Returns a dictionary containing all of the key-value pairs
       in this context."""
]]>
  </programlisting>
  </para>

  </section>
</chapter>

<!--
  Local Variables:
  mode: sgml
  indent-tabs-mode: nil
  sgml-indent-step: 1 
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  sgml-parent-document: ("qmtest.xml" "book" "chapter")
  End:
-->
