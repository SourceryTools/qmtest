<?xml version="1.0"?>
<!--

  File:   index.xhtml
  Author: Mark Mitchell, Greg Wilson, Alex Samuel
  Date:   2000-11-01

  Contents:
    Master file for qmtest design document.

  Copyright (C) 2000 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
[
  <!-- Internal DTD subset.  Only entities should be defined here. -->

  <!-- Include the QM common DTD module.  -->

  <!ENTITY % qm SYSTEM "../../qm.mod">
  %qm;

  <!-- Each chapter is contained in a separate file, and included by
  entity reference.  -->

  <!ENTITY req.xml SYSTEM "req.xml">
  <!ENTITY core.xml SYSTEM "core.xml">
  <!ENTITY impl.xml SYSTEM "impl.xml">
  <!ENTITY iface.xml SYSTEM "iface.xml">
  <!ENTITY refs.xml SYSTEM "refs.xml">
]>
<book>
 <bookinfo>
  <title>&qmtest; Design</title>
  <authorgroup>
   <author>
    <firstname>Mark</firstname>
    <surname>Mitchell</surname>
   </author>
   <author>
    <firstname>Alex</firstname>
    <surname>Samuel</surname>
   </author>
   <author>
    <firstname>Greg</firstname>
    <surname>Wilson</surname>
   </author>
  </authorgroup>
  <copyright>
   <year>2000</year>
   <holder>CodeSourcery LLC</holder>
  </copyright>
  <legalnotice>&qmlicense;</legalnotice>
  <releaseinfo>version 0.2</releaseinfo>
  <revhistory>
   <revision>
    <revnumber>0.2&nbsp;</revnumber>
    <date>2000 December 7</date>
    <revremark>Initial revision.</revremark>
   </revision>
  </revhistory>
 </bookinfo>

 <chapter id="chap-introduction">
  <title id="chap-introduction-title">Introduction</title>

  <para>Many programmers do not test their code sufficiently because:
   <itemizedlist>
    <listitem>
     <para>Existing tools are expensive and hard to use.</para>
    </listitem>

    <listitem>
     <para>Thus, testing is time-consuming and tedious.</para>
    </listitem>

    <listitem>
     <para>Therefore, neither programmers nor their management see
     testing as a cost-effective approach to software quality.</para>
    </listitem>
   </itemizedlist>
   In addition, existing testing tools do little to inform testers
   about how comprehensively their program has been tested, making it
   difficult for testers to determine where to focus their efforts.</para>

  <para>&qmtest; is open source software, available at no charge, and
  is easy to use.  In particular:
   <itemizedlist>
    <listitem>
     <para>&qmtest; has a gentle learning curve, especially for
     developers without software engineering training. &qmtest; is
     easy to install and configure, and provides simple, powerful
     interfaces for creating tests, running tests, and obtaining
     reports.</para>
    </listitem>

    <listitem>
     <para>&qmtest; is flexible.  &qmtest can handle almost any kind of
     testing situation, from unit testing to full-scale integration
     testing.  The programs tested can be large or small, written in
     low-level or high-level languages.</para>
    </listitem>

    <listitem>
     <para>&qmtest; provides feedback regarding the quality and
     thoroughness of testing.</para>
    </listitem>

    <listitem>
     <para>&qmtest; is a high-performance testing tool.  &qmtest can 
     automatically parallelize the execution of tests to take
     advantage of parallel machines.</para>
    </listitem>
   </itemizedlist>
  </para>

  <para>This document begins by describing three typical users, whose
  testing needs &qmtest; is designed to address. It then explores
  their <link linkend="chap-requirements">requirements</link> in more
  detail, in order to determine the features that &qmtest; must
  have. This analysis is followed by a discussion of the <link
  linkend="chap-concepts">concepts</link> that users will encounter
  when using &qmtest;.  Finally, this document provides a design for
  &qmtest;'s <link
  linkend="chap-implementation">implementation</link>.</para>

  <section id="sec-acknowledgements">
   <title>Acknowledgements</title>

   <para>This document has its origins in the submissions to the
   testing category of the Software Carpentry design competition in
   the spring of 2000, and in the hundreds of messages on the Software
   Carpentry discussion list in August--October of the same year.  We
   are grateful to Paul Dubois (<ulink
   url="http://www.llnl.gov">Lawrence Livermore National
   Laboratory</ulink>), Stephen Lee (<ulink
   url="http://www.lanl.gov">Los Alamos National Laboratory</ulink>),
   Brian Marick (of <ulink
   url="http://www.testing.com">testing.com</ulink>), Ken Martin
   (<ulink url="http://www.kitware.com">Kitware</ulink>), and Dave
   Thomas (a very <ulink
   url="http://www.pragmaticprogrammer.com">pragmatic
   programmer</ulink>) for their input.</para>

  </section>

  <section id="sec-user-profiles">
   <title>User Profiles</title>

   <para>As a way of delimiting the scope of this project, this
   section describes three typical users whose needs &qmtest; seeks to
   address.  These user profiles motivate the discussion in the next
   chapter of system requirements.</para>

   <section><title>Bhargan Basepair</title>

    <para>Bhargan Basepair develops fuzzy DNA pattern-matching
    algorithms for a bio-technology firm called Genes'R'Us.  As a
    semi-official service for his colleagues, he runs an overnight DNA
    sequence query service.  Researchers e-mail DNA sequences to him;
    Bhargan saves these messages in files called
    <filename>search/a</filename>, <filename>search/b</filename>, and
    so on, then edits them to add query directives. </para>

    <para>Before going home at night, he runs a Unix shell script
    which searches the database for each sequence in the
    <filename>search</filename> directory.  The results are put in
    files called <filename>search/a.out</filename>,
    <filename>search/b.out</filename>, and so on.  Each search
    typically takes 15-20 minutes; he is sometimes not able to run all
    of the searches he has received in a single night.  When Bhargan
    comes in the next morning, he mails out the
    <filename>.out</filename> files, then examines the search logs to
    see if he can improve the performance of his search
    engine. </para>

    <para>Bhargan has written a small Python program to automate this
    process, and now wants to test it.  His main concerns are:
     <itemizedlist>
      <listitem>
       <para>One person's results must <emphasis>never</emphasis> be
       sent to someone else -- there could be legal fallout if this
       ever happened.</para>
      </listitem>

      <listitem>
       <para>Queries should never be lost or garbled: anyone who sends
       a valid query should eventually get a reply.</para>
      </listitem>

      <listitem>
       <para>The system should only run the search if the user has
       specified sensible parameters (so that researchers don't get
       results for a search other than the one they thought they were
       running). </para>
      </listitem>

      <listitem>
        <para>The test program shouldn't send mail to real people, or
        be sent mail from them.  The corporate IT department might be
        willing to set up dummy user accounts for Bhargan to use in
        testing, but he'll probably see the millennium roll over again
        before it actually gets done.</para>
      </listitem>

     </itemizedlist>
    </para>

   </section>

   <section id="story-diana">
    <title id="story-diana-title">Diana Dowhile</title>

    <para>Diana studied parsing algorithms for her Master's degree in
    Computer Science at Euphoric State University.  She is now
    extending the C++ parser for the GNU Compiler Collection (GCC).
    The parser currently contains 47,000 executable lines of C and C++
    in 350 functions, distributed among 18 files, and is expected to
    triple in size by the time the project is done.</para>

    <para>Diana starts work on each language feature by writing a few
    new test cases that exercise it.  (Many of these tests are
    actually not legal C++, since one of her goals is to improve the
    compiler's error messages.) Diana only starts implementing the
    feature itself once all of her test cases are written and
    failing&mdash;past experience has taught her that if she writes
    her tests <emphasis>after</emphasis> implementing the feature, she
    will test against her implementation, and not against the language
    standard.</para>

    <para>Diana has inherited a collection of approximately 1200
    tests, most written to test GCC's existing parser.  These test
    files are scattered throughout the GCC source tree.  Each test
    consists of one or more specially-formatted comments embedded in a
    C or C++ source file.  A simple shell script extracts these
    comments, runs the C++ parser with the parameters contained in the
    comment, and compares the output with the expected output (which
    is also embedded in the comment). The test is considered a pass if
    the compiler emits exactly the output expected.</para>

    <para>Diana would like a tool to re-run her tests automatically,
    and to collect statistics on how many tests have been executed,
    with what results.  She would also like some help generating
    tests: many are simple variations on a theme, such as using
    eighteen different kinds of constants as array subscripts, and she
    has made several errors in the tests themselves when copying and
    modifying old test files.  Finally, she would like a single
    command to run the entire test suite simultaneously on each of the
    dozen or so different machines in the testing network.  These
    machines are a mix of various versions of Unix and Microsoft
    Windows.</para>

   </section>

   <section id="story-ovide">
    <title>Ovide Overlay</title>

    <para>Ovide Overlay is developing new map overlay algorithms for a
    geographical information system.  The system takes two maps A and
    B as input.  Each map covers the same geographical area, and is
    divided into non-overlapping polygons.  The module's output is the
    the map that would be generated by drawing the input maps on
    transparent film, and placing them on top of each other.  For
    example, if A shows soil types, and B shows vegetation, the map
    shows where different kinds of plants are growing on different
    types of soil.</para>

    <para>In order to simplify his studies, Ovide is using maps
    divided into rectangles, whose vertices all lie on a
    [0...X]&times;[0...Y] grid.  His reference program implements a
    naive "all-against-all" overlay algorithm, in which every
    rectangle in map A is tested against every rectangle in map B.
    Ovide wants to implement and test several refinements of this
    algorithm.  His most important testing requirement is to make sure
    that the new algorithms generate the same results as the old ones,
    i.e. that his performance optimizations do not introduce bugs.
    His second requirement is that his test suite record and report
    the performance of the new algorithms on some of the test data
    sets&mdash;he wants to avoid the redundant work involved in
    building one re-execution environment for testing, and another for
    performance measurement.
    </para>

   </section>

  </section>

 </chapter>

 &req.xml;
 &core.xml;
 &impl.xml;
 &iface.xml;
 &refs.xml;

</book>

<!--
  Local Variables:
  mode: sgml
  indent-tabs-mode: nil
  sgml-indent-step: 1
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  End:
-->
