<?xml version="1.0"?>
<!--

  File:   design-td.xml
  Author: R. Lindsay Todd
  Date:   2000-12-05

  Contents:
    Design of qmconfig tailoring database.

  Copyright (C) 2000 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<section><title>&M-TD;</title>

 <figure id="fig-cl-tailor" float="1">
  <title>Tailoring Database</title>
  <mediaobject>

   <imageobject>
    <imagedata align="center"
               fileref="figures/cl_tailor.eps" />
   </imageobject>

   <imageobject>
    <imagedata align="center"
               fileref="figures/cl_tailor.png" />
   </imageobject>

   <textobject>
    <phrase>Tailoring database</phrase>
   </textobject>

  </mediaobject>
 </figure>

 <para><xref linkend="fig-cl-tailor" /> shows the &M-TD;.  Before a
 probe is conducted, the &M-TD; is consulted.  Likewise, the &M-ADAPT;
 uses the &M-TD; to extract symbol values.</para>

 <para>In reality, the &M-TD; is implemented over several databases.
 There is a system-wide cache, which should be protected so that only
 trusted users can regenerate it.  When a &D-kit; is tailored, probe
 information is cached in the &D-kit; directory.  Finally, a
 &D-tailor; may manually enter information into a configuration file
 in a &D-kit; to provide values to &qmconfig;.</para>

 <para><programlisting>
<![CDATA[
class TailorDB:

    """Instances of this class represent tailoring databases.  A
    project may be tailored using a set of tailoring databases."""

    def __init__(self, file_name):

        """Constructor for a TailorDB object.

        'file_name' -- Name of a file containing a tailoring
        database."""


    def AddBase(self, tdb):

        """Add a base tailoring database to this database.

        'tdb' -- The base tailoring interface to from which this
        database will inherit entries."""


    def DefineEntry(self, entry_name, entry_type, def_val, doc):
        """Define a new entry for the tailoring database.

        'entry_name' -- Name of the new entry.

        'entry_type' -- Type of the new entry.
        $$$ What are our basic types?

        'def_val' -- Default value for this entry.

        $$$ Do we want some sort of substitution to take place?  If
        so, then ideally it is Pythonic.  But that implies we also
        need to have a 

        'doc' -- Brief description for this entry.

        returns -- None"""


    def SetValue(self, entry_name, value):

        """Enter or change a value for an entry.

        'entry_name' -- Entry being assigned a value.

        'value' -- The value being assigned to the entry.

        returns -- None"""


    def GetValue(self, entry_name):

        """Get the value of an entry."""


    def Commit(self):

        """Commit all changes to the file.

        raises -- 'IOError' if the file cannot be written.

        returns -- None"""
]]></programlisting</para>


</section>

<!--
  Local Variables:
  mode: sgml
  indent-tabs-mode: nil
  sgml-indent-step: 1 
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  sgml-parent-document: ("qmconfig.xml" "book" "chapter" "section")
  End:
-->
