<?xml version="1.0"?>
<!--

  File:   overview.xml
  Author: R. Lindsay Todd
  Date:   2000-11-14

  Contents:
    Overview of the qmconfig tool.

  Copyright (C) 2000 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<chapter id="chap-overview"><title>Overview of &qmconfig;</title>

 <para>This chapter is introduces the &qmconfig; tool.  Whereas <xref
 linkend="chap-requirements"></xref> introduced the requirements for
 &qmconfig;, this chapter discusses scenarios of how &qmconfig; could
 actually be used to meet these requirments.</para>

 <para>&qmconfig; comes in both &Qgui; and command line variants.  The
 &Qgui; command can be invoked with no arguments, in which case it
 opens a window with menus leading to all its various operations, or
 it may be invoked (perhaps through a &Qwindows; association) with a
 &M-PDD; file given as a parameter, in which case it begins a dialog
 for tailoring the kit.  The command line version also specify the
 name of a &M-PDD; file, followed by switches controlling tailoring
 features, to indicate that a kit should be tailored.  It may also be
 specified with other switches to invoke other operations.  Everything
 that can be done through the &Qgui; can also be done through the
 command line version.</para>

 <para>A &D-tailor; has quite a different perception of the &qmconfig;
 tool than a &D-softdev;.  A &D-tailor; is interested in using
 &qmconfig; to tailor software, usually to compile and install it,
 possible to create &D-bindists;.  A &D-softdev; is mainly concerned
 about creating &D-srcdists;, getting everything correct so that
 &qmconfig; will function for the &D-tailor;.  Of course, a
 &D-softdev; will probably tailor projects in the course of
 development and testing.</para>

 <para>Because these two perspectives are very different, we will
 present overviews from each of these points of view.  We will
 consider the view of the &D-tailor; first, since &qmconfig; is
 primarily intended to serve the &D-tailor;.</para>

 <section id="sec-overview-tailors">
  <title>&D-Tailors-;' Perspective of &qmconfig;</title>

 <para>As we discussed in <xref
 linkend="sec-requirements-actors-tailors"></xref>, &D-tailors; range
 from &D-casinsts; to &D-proinsts; to &D-sysints;.  Each of these has
 different ways of using &qmconfig;</para>

  <section><title>&D-CasInsts-; Use of &qmconfig;</title>

   <para>We expect &D-casinsts; to run &qmconfig; on systems where it
   has already been installed, either as part of the operating system,
   by a &D-proinst;, or possibly through installation of a
   &D-bindist;.  In the sections that follow, it should be understood
   that &qmconfig; may have some system-wide configuration files that
   alter the default behaviour (generally to support site
   conventions).</para>

   <section id="instwiz"><title>Installation through the &qmconfig;
   Wizard</title>

    <para>Ideally, a &D-casinst; can receive a &D-srcdist; and simply
    start &qmconfig; in its <quote>wizard</quote> mode.  With
    &Qwindows;, this would be done by receiving a &Qzip; file and
    unpacking it; then clicking on the &qmconfig; icon in the &D-kit;
    (which would be associated with the &qmconfig; project file for
    the package).<footnote><para>It might be possible to have some
    sort of archive that unpacks and automatically starts &qmconfig;.
    This would be better yet.</para></footnote> A &D-casinst; on a
    &Qlinux; might be able to operate in the same manner.  People
    working on legacy &Qunix; systems might need to start &qmconfig;
    from a command line.</para>

    <para>Once the &qmconfig; &Qgui; started, it presents a pane with
    some information about the package, like its name, version, and a
    brief description.  Buttons appear to indicate whether to
    <guibutton>Continue</guibutton> or <guibutton>Cancel</guibutton>
    installation.  There is also a <guibutton>Advanced
    Mode</guibutton> button for entering &qmconfig;'s
    <quote>advanced</quote> mode.</para>

    <para>Since we are talking about the &D-casinst;, we assume that
    the <guibutton>Continue</guibutton> button is chosen, and the pane
    shows the next view.  If there is information that
    <emphasis>must</emphasis> be entered by everyone, the next few
    panes will present opportunities to enter this data.  Each pane
    will present buttons to <guibutton>Continue</guibutton>,
    <guibutton>Cancel</guibutton>, get <guibutton>Help</guibutton>, or
    go <guibutton>Back</guibutton>.</para>

    <para>After all needed data are entered, the view changes to show
    the status of the process of probing the operating system.  Should
    this step fail, a problem report would be presented, along with
    any information that may have been supplied with the package to
    help in this case, and an opportunity to send a bug report to the
    package's maintainers.</para>

    <para>Once probing has completed, the status view changes to show
    the progress of actually tailoring the &D-kit;.  Then a pane would
    be presented giving the &D-tailor; the chance to
    <guibutton>Build</guibutton> the package or to
    <guibutton>Quit</guibutton>.</para>

    <para>We assume here that the <guibutton>Build</guibutton> button
    is chosen.  The package is now built, and a pane shows the
    progress.  As with the probing phase, we present a problem report
    if this step fails.  (It is almost certain that a problem in this
    step should be reported to the package maintainer.)</para>

    <para>If the package includes any self-tests, a pane appears
    allowing testing to proceed or be skipped.  After testing, another
    pane appears allowing a choice of installing or quitting.</para>

    <para>Installation is an interesting problem on multiuser systems,
    since there are likely access controls preventing a system-wide
    installation.  Furthermore, the software is likely to need to be
    tailored differently for each of these cases.  Probably the choice
    of installation type will have been presented as one of the
    questions asked when data was collected.</para>

    <para>After installation, &qmconfig; will offer to clean the
    &D-kit; directory of unnecessary files (such as object
    code).</para>

    <para>The package may have tests to check if installation was
    successful.  If so, the &D-tailor; will be given a chance to run
    these tests.  (Note that if the &D-kit; directory is not first
    cleaned, there is a possibility that these tests will falsely
    succeed due to the presence of some file that should have been
    removed!)</para>

    <para>Our hope is that it will be as easy to install Open Source
    software using &qmconfig; as it is to install &D-bindists; with
    wizards on &Qwindows; today.  But we also hope eventually to do
    even better than we have described here, and support getting
    package updates, automatically getting prerequisites, etc.</para>

   </section>

   <section><title>Using the &qmconfig; &Qgui;</title>

    <para>Even a &D-casinst; may decide to change some of the default
    decisions made by the &qmconfig; wizard.  This can be done by
    clicking on the <guibutton>Advanced</guibutton> button on the
    initial pane.</para>

    <para>Once this is done, a pane appears with <quote>tabs</quote>
    to select different pages.  The initial page allows entry of data
    needed to tailor the package, installation directory locations,
    prerequisite package locations, and option choices (if any) for
    the package.  A second page lists each of the probes used in
    tailoring this package, allowing the &D-tailor; to override their
    results.</para>

    <para>After these choices are made, the
    <guibutton>Continue</guibutton> button can be pressed, and probing
    begins.  The &D-tailor; can choose to build, install, and test the
    package.</para>

   </section>

  </section>

  <section><title>&D-ProInsts-; Use of &qmconfig;</title>

   <para>A &D-proinst; may use &qmconfig; just like a &D-casinst;.
   However, a &D-proinst; may wish to use the command line interface,
   so that &qmconfig; can be used in scripts.  A &D-proinst; may also
   need to install &qmconfig; on systems where it is not already
   available, configure site conventions, and configure for
   parallelism.</para>

   <section><title>Using the &qmconfig; Command Line Interface</title>

    <para>Both the command line and &Qgui; versions of &qmconfig;
    accept various <quote>help</quote> options that can be used to
    determine what customization options are available in a &D-kit;,
    what probes will be executed, and what site conventions are
    tested.  The &Qgui; version can even be used to create a file
    containing the selected options and probe result overrides that
    will automatically be used by &qmconfig; when it is invoked.
    Alternatively, once the &D-proinst; has determined the available
    options, he or she can construct an appropriate command line
    invocation.</para>

    <para>The command line interface is not as <quote>wizardly</quote> as the
    &Qgui;.  It performs a distinct task, such as getting help text,
    tailoring (probing and adapting source files), invoking the build
    system, installing, etc.  But this level of control is what is
    needed for effective scripting.</para>

   </section>

   <section><title>Bootstrapping &qmconfig;</title>

    <para><xref linkend="ucInstQMCPre"
    endterm="ucInstQMCPre-a"></xref> and <xref linkend="ucInstQMC"
    endterm="ucInstQMC-a"></xref> detail the need for a &D-proinst; to
    be able to install &qmconfig; or a prerequisite on a system that
    does not already have &qmconfig;.  The various packages need to be
    installed in the correct order.  Each package would have one or
    more bootstrap scripts; it might be necessary to invoke the
    appropriate one for the platform (e.g., a batch file on &Qwindows;
    or a Bourne shell script on &Qunix;).</para>

    <para>Other packages could ship with bootstrap scripts besides
    those needed to get &qmconfig; running.  However, these may
    introduce requirments that do not exist when they are not used.
    For instance, a package implemented in Java is not likely to need
    a C compiler.  However, the bootstrap script may need a C compiler
    to build tools needed to perform its tasks.</para>

   </section>

   <section><title>Maintaining &qmconfig;</title>

    <para>There are a number ways in which &qmconfig; needs periodic
    maintenance.  We would expect that a &D-casinst; would use &Qrpm;
    packages (or similar) to keep &qmconfig; maintained on a system.
    We hope to provide tools to make it easier to maintain &qmconfig;
    from source.</para>

    <para>One thing that all &D-tailors; are likely to need to do
    periodically is update the cache of probe results.  This obviously
    needs to be done if we update the probe collection.  However,
    operating system updates can also invalidate the probe cache.  So
    can adding or updating other packages, such as
    libraries.<footnote><para>Why not rely on packages to also provide
    updates to the probe cache?  Because this information is sensitive
    to the gestalt of all packages installed on the
    <emphasis>running</emphasis> system, which may not be the same as
    the system on which a &D-bindist; was built.</para></footnote>
    &qmconfig; has an option for updating this cache.</para>

   </section>


   <section><title>Site Conventions and other Customizations</title>

    <para>When a &D-tailor; runs &qmconfig;, it is possible to specify
    every directory in which the package will be installed.  Like
    &Qautoconf;, many of these directory paths will take on default
    values relative to <envar>$prefix</envar> and
    <envar>$exec_prefix</envar>, which in turn will take on
    platform-specific default values.  But if desired, extension
    modules, written in &Qpython;, can be added to compute alternate
    default values, parameterized on the package name, version number,
    architecture, etc.  Other common parameters can be given
    site-specific default values.</para>

   </section>

  </section>

  <section><title>&D-SysInts-; Use of &qmconfig;</title>

   <para>A &D-sysint; prepares &D-bindists; for other users.  This
   probably, goes beyond the scope of other tailoring tools, but it
   makes sense to incorporate some support within &qmconfig; for a
   couple of reasons.</para>

   <para>First, the installed components of some packages may divide
   nicely into several different &D-bindists;.  For instance, a
   &D-kit; for the &Q-Xwin; might create clients, development tools,
   &Q-X; servers, and runtime libraries.<footnote><para>It always irks
   me that IBM's AIX insists on putting &Q-X; servers on systems with
   no graphics systems, since that is part of the <quote>X11 run-time
   environment</quote>.  Apparently someone forgot that &Q-X; is
   networked.</para></footnote> The &D-softdev; is in the position of
   best knowing how a package could be divided into distributions, but
   it is the &D-sysint; that actually creates distributions.  It makes
   sense to include this information in the &M-PDD;.</para>

   <para>Second, determining what distribution builders are available
   on a platform is a tailoring operation, as is customizing the build
   system to be able to build distributions.  It is also possible to
   extend knowledge of other build systems to &qmconfig;.</para>

   <para>A &D-sysint; would tailor and build a &D-kit; as appropriate.
   However, instead of allowing &qmconfig; to install the package, he
   or she would instead invoke &qmconfig; with its distribution
   builder option.  From the command line interface, this would need
   to request which distribution builder is to be used, and which
   &D-bindists; should be constructed.  From the &Qgui;, menus and
   checkboxes would be used to identify how and what to
   construct.</para>

   <para>As we mentioned above, a &D-proinst; may create a file
   containing tailoring information to be used when &qmconfig; later
   tailors the &D-kit;.  A &D-sysint; may create this file and create
   a &D-tsrcdist;, in much the same way as a &D-softdev; creates a
   &D-srcdist;.</para>

  </section>

 </section>

 <section id="sec-overview-softdev">
  <title>&D-SoftDevs-;' Perspective of &qmconfig;</title>

  <para>A &D-softdev; creates &D-srcdists;.  Our focus will be on how
  to incorporate &qmconfig;.</para>

  <para>&qmconfig; relies on a &M-PDD; to specify what is built, which
  source files are needed, what options may be specified, etc.  From
  this information, &qmconfig; determines what files need to be
  scanned for symbols defined by probes.  This is used to determine
  what probes will be used at tailoring time.  This database can be
  distributed over multiple directories, since a &M-PDD; file can
  specify that other directories are included.</para>

  <para>Source files must be parameterized based on macros or other
  symbols that &qmconfig; can identify as indicating the results of a
  feature test or package option specification.  Complete information
  on the probes included with &qmconfig; will be available in the
  documentation.</para>

  <para>Ultimately, it may be useful to provide one or more libraries
  of common operations that programmers can use.  These libraries
  would provide uniform interfaces, while themselves being
  parameterized on operating system features.  These libraries would
  also simplify operations like building path names relative to
  options specified when the package was tailored.  However, portable
  librares are not a pancea for writing portable software, since they
  usually incur a performance hit.</para>

 </section>

</chapter>

<!--
  Local Variables:
  mode: sgml
  indent-tabs-mode: nil
  sgml-indent-step: 1 
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  sgml-parent-document: ("qmconfig.xml" "book" "chapter")
  End:
-->
