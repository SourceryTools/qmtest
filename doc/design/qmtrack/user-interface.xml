<?xml version="1.0"?>
<!--

 File:   user-interface.xml
 Author: Benjamin Chelf
 Date:   2000-11-25

 Contents:
   Chapter `User Interface' of qmtrack design document.

 This is part of the master document contained in qmtrack.xml.

  Copyright (C) 2000 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<chapter><title>User Interface</title>

 <section><title>Modes of Interaction</title>

  <para>This section describes the different methods the user can use to
  create issues, edit issues, and query the database. We invision three
  main modes for interaction: command line, email, and web. However, based
  on the specification in the previous section, any mode may be
  added.</para>

 </section>

 <section><title>Command Line</title>

  <para>
  <programlisting>
<![CDATA[
Usage:

qmtrack [ options ] command [ command_options ] [ command_args ]

]]>
  </programlisting>
  qmtrack commands:</para>
  <para><literal>create</literal>: This command is used to create a new
  issue. It takes as its mandatory arguments a summary and
  categories. Optional arguments include any other field values you wish
  to set. For example:
  <programlisting>
<![CDATA[
$ qmtrack create SUMMARY="My first issue" CATEGORIES+=simple CATEGORIES+=first
2
$ 
]]>
  </programlisting>
  will create a new issue that has the summary, <literal>"My first
  issue"</literal> and belongs to the two categories,
  <literal>simple</literal> and <literal>first</literal>. The value
  printed to standard out is the ID of the issue.</para>

  <para> To specify field values to qmtrack commands, there are three
  special characters to indicate which action should be taken:
   <itemizedlist>
    <listitem>
     <para>= : Set the field to the given value (e.g. FIELD=value).</para>
    </listitem>

    <listitem>
     <para>+= : Add the given value to the set of values in the field
     (e.g. CATEGEORY+=value). This should only be used on fields that
     contain sets of values.</para>
    </listitem>

    <listitem>
     <para>-= : Remove the given value to the set of values in the field
     (e.g. CATEGORY-=value). This should only be used on fields that
     contain sets of values.</para>
    </listitem>
   </itemizedlist>
  All of the commands to create and edit issues use the above three
  operators to specify new values for fields.
  </para>
  <para><literal>edit</literal>: This command is used to edit an existing
  issue. It takes the ID of the command you wish to edit and then as
  arguments any fields you wish to edit. For example:
  <programlisting>
<![CDATA[
$ qmtrack edit 2 CATEGORIES-=first
SUCCESS: Edited ID 2.
$ 
]]>
  </programlisting>
  will edit the issue with ID 2 removing the <literal>first</literal>
  category from the issue. A new revision of the issue will be created and
  stored in the database. If the edit succeeds,
  <literal>"SUCCESS"</literal> will be printed to standard out followed by
  a message containing information on the current revision number of the
  issue.
  </para>
  <para>You may also use the <literal>edit</literal> command to join two
  or more issues into one and split one issue into two. Simply give the
  edit command the <literal>-j</literal> flag followed by another ID to
  join it to the issue. Any edits that are given on the command line will
  be applied to the first revision of the joined issue. Similarly, the
  <literal>-s</literal> flag will split the current issue into two
  issues. Any edits made on that command line will be applied to the new
  issue and its ID will be given on the command line as if create had been
  called. All fields that are not edited in the split issue will be copied
  from the original issue.
  </para>
  <para><literal>query</literal>: This command is used to search the
  database for issues that match certain criteria. 
  arguments any fields you wish to edit. For example:
  <programlisting>
<![CDATA[
$ qmtrack query -v INSERT NEW QUERY SYNTAX HERE
QUERY RESULTS:
1 issue

Issue 2, Summary "My first issue", Last updated "October 6, 2000"

$ 
]]>
  </programlisting>
  searches for all issues that were updated in the range of dates between
  October 5th, 2000 and October 7th, 2000. The results are printed to
  standard out based on the verbosity level of the request. The full set
  of options are as follows:
  </para>
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>flag</entry>
      <entry>description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>-v</literal></entry>
      <entry>First level of verbosity.</entry>
     </row>
     <row>
      <entry><literal>-vv</literal></entry>
      <entry>More verbose.</entry>
     </row>
     <row>
      <entry><literal>-vvv</literal></entry>
      <entry>Most verbose.</entry>
     </row>

<!-- For now commented out until we have a new way of querying.
     <row>
      <entry><literal>-e</literal></entry>
      <entry>Match exactly. Following this flag is the
      field to match and then the value to match in that field exactly.
      </entry>
     </row>
     <row>
      <entry><literal>-c</literal></entry>
      <entry>Contains. Following this flag is the field to match and then
      the value to test if the field contains that value. This should only
      be used on fields that have multiple possible values or strings. For
      example, you may search the CATEGORY field for issues that are
      members of one category or search on the SUMMARY field to find all
      issues that contain the string <literal>"bug"</literal> in their
      summary. However, it does not make sense to do a "contains" search
      on a field like REVISION.</entry>
     </row>
     <row>
      <entry><literal>-l</literal></entry>
      <entry>Less than. For fields that have a specfic ordering (e.g.,
       DATE or SEVERITY), you may use this flag to search for issues that
       have a value less than a specified value in the given field. This
       flag also takes the field to match and then a value.</entry>
     </row>
     <row>
      <entry><literal>-g</literal></entry>
      <entry>Greater than. Opposite of less than.</entry>
     </row>
     <row>     
      <entry><literal>-r</literal></entry>
      <entry>Range. Used to simplify writing of a less than search anded
      with a greater than search. This flag, unlike any other, takes two
      values after the field: the lower bound and the upper bound.</entry>
     </row>

     <row>
      <entry><literal>-a</literal></entry>
      <entry>And. Used to and two search criteria together. Simply list
      the two flags (and their arguments) after the <literal>-a</literal>
      flag and the query will intersect the results of the two queries
      before printing. To and together more than two results, use multiple
      <literal>-a</literal> flags.</entry>
     </row>
     <row>
      <entry><literal>-o</literal></entry>
      <entry>Or. Used to or two search criteria
      together. Syntactically equivalent to the <literal>-a</literal> flag
      except the two queries are unioned instead of intersected.</entry>
     </row>
     <row>
      <entry><literal>-n</literal></entry>
      <entry>Not. Used to take the complement of a given search
      criteria. The opposite of the given criteria is reported when this
      flag preceeds that query flag.</entry>
     </row>
-->

    </tbody>
   </tgroup>
  </informaltable>
 </section>

 <section id="sec-email">
  <title id="sec-email-title">Email</title>

  <para>To create, edit, and query issues via email, simply construct an
  email in xml as shown below and send the message to the database. It
  will respond with the same information that would be given on the
  command line had the request been issued that way. The first line of the
  email should contain the command (e.g. <literal>create</literal>,
  <literal>edit</literal>, or <literal>query</literal>). You may then
  either give the command as you would on the command line, or you may
  specify it using an xml representation. For example, to create a new
  issue, you can send an email with this body:
  
  <programlisting>
<![CDATA[
  create SUMMARY="My issue" CATEGORIES+="foo" CATEGORIES+="bar"
]]>
  </programlisting>

  or with this body:

  <programlisting>
<![CDATA[
  create
  <issue>
    <summary>My issue</summary>
    <categories>foo</categories>
    <categories>bar</categories>
  </issue>
  ]]>
  </programlisting>

  Either way, you would receive an email back containing the text:

  <programlisting>
<![CDATA[
  Issue Created:

  <issue>
    <id>2</id>
    <summary>My issue</summary>
    <categories>foo</categories>
    <categories>bar</categories>
  </issue>
  ]]>
  </programlisting>

  indicating that the issue has been created. To edit an issue, you may
  either give the command line for editing the issue or request that the
  issue be sent back to you for editing and subsequently send it back
  after you have edited it. For example, to remove the category, foo, from
  the issue we just created, you could send the following message:

  <programlisting>
<![CDATA[
  edit 2 CATEGORIES-=foo
  ]]>
  </programlisting>

  or you could send the following message:

  <programlisting>
<![CDATA[
  retrieve 2 for edit
  ]]>
  </programlisting>

  This would cause the database to send you the following message:
  <programlisting>
<![CDATA[
  edit
  <issue>
    <id>2</id>
    <summary>My issue</summary>
    <categories>foo</categories>
    <categories>bar</categories>
  </issue>
  ]]>
  </programlisting>

  which you would then edit to look like:

  <programlisting>
<![CDATA[
  edit
  <issue>
    <id>2</id>
    <summary>My issue</summary>
    <categories>bar</categories>
  </issue>
  ]]>
  </programlisting>

  (removing the category "foo") and send back to the database. In either
  case, you after the edit is complete, you would receive a message that
  looked like this:

  <programlisting>
<![CDATA[
  Issue edited:

  <issue>
    <id>2</id>
    <summary>My issue</summary>
    <categories>bar</categories>
  </issue>
  ]]>
  </programlisting>


  INSERT QUERY INFO HERE.
<!-- Commented out for now until we know what's up with queries

  <para>Queries are similar to edits and creates with the exception that
  the field lines must contain additional information to indicate what type
  of query to be performed (e.g. 'contains', 'exact', 'less', 'greater', or
  'range'). This attribute comes between the field name and the value and
  is separated by a colon. Also, to use the 'and', 'or', and 'not'
  directives, simply place the directive on a line before the one or two
  fields to that argument. For example, to perform a query that finds all
  issues that do not contain the word "foo" in the summary and have "bar"
  as their only category, the email is formed like this:
   <programlisting>
<![CDATA[
query
not
and
SUMMARY:contains:"foo"
CATEGORY:exact:"bar"
]]>
   </programlisting>

-->
  </para>
 </section>

 <section><title>Web</title>
  <para>To create, edit, and perform queries on the web, the user will be
  presented with a form that has all the fields of an issue. This form
  will be generated by DTML using the special dtml-in tag that iterates
  over all the elements in a list (in this case, the fields of the
  issue). For more information about DTML and the dtml-in tag, see
  http://www.zope.org/Documentation/Guides/DTML. The dtml code to display
  the forms will be similar to the following:

  <programlisting>
<![CDATA[
  <table>
  <dtml-in fields>
  <tr><td><dtml-var name></td>
      <td><dtml-expr "get_display"></td>
  </tr>
]]>
  </programlisting>

  where for each field, the field name is displayed and then the method
  get_display is called on each field to determine the way the field
  should be displayed (e.g., as a text box, as a set of check boxes,
  etc.). For querying, another line is added to the above to extract from
  the field what choices for querying the user has (e.g., exact match
  versus substring match, less than versus greater than, etc.). Using
  DTML, the administrator will be able to specify headers and footers and
  other configuration-type information simply so the web interface looks
  and feels the way the administrator wishes.</para>

  <para>To create a new issue, the user will be presented with a form like
  the following:
  
  <mediaobject>
  <imageobject>
  <imagedata fileref="create1.jpg" format="JPG"></imagedata>
  </imageobject>
  </mediaobject>

  He/she will then fill in the necessary data, click "Create," and be
  shown a page like the following:

  <mediaobject>
  <imageobject>
  <imagedata fileref="create2.jpg" format="JPG"></imagedata>
  </imageobject>
  </mediaobject>

  To edit, the user will be presented with a form like this:

  <mediaobject>
  <imageobject>
  <imagedata fileref="edit1.jpg" format="JPG"></imagedata>
  </imageobject>
  </mediaobject>

  He/she will then fill in the ID of the issue to edited and click on
  "Retrieve." This will fill in the form with the issue:

  <mediaobject>
  <imageobject>
  <imagedata fileref="edit2.jpg" format="JPG"></imagedata>
  </imageobject>
  </mediaobject>

  Then the user can edit it and click on "Edit" to commit the changes
  made. After doing this, the user will be presented with a page like the
  following:

  <mediaobject>
  <imageobject>
  <imagedata fileref="edit3.jpg" format="JPG"></imagedata>
  </imageobject>
  </mediaobject>

  To query, the user will be presented wiht a form like this:

  <mediaobject>
  <imageobject>
  <imagedata fileref="query1.jpg" format="JPG"></imagedata>
  </imageobject>
  </mediaobject>

  Then the user can simply put values in the fields as desired, choosing
  how to search on each field with the given pull down menus. (Each field
  type has a set of "ways to search" that are determined and used to
  generate the pull down menus.) Once the user inputs the data and clicks
  "Query":

  <mediaobject>
  <imageobject>
  <imagedata fileref="query2.jpg" format="JPG"></imagedata>
  </imageobject>
  </mediaobject>

  the following page is returned:

  <mediaobject>
  <imageobject>
  <imagedata fileref="query3.jpg" format="JPG"></imagedata>
  </imageobject>
  </mediaobject>

  The user may then refine the search to enforce additional constraints.
  </para>
 </section>
</chapter>

<!--
  Local Variables:
  indent-tabs-mode: nil
  sgml-indent-step: 1 
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  sgml-parent-document: ("qmtrack.xml" "book" "chapter")
  End:
-->
