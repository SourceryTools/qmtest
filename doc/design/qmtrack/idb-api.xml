<?xml version="1.0"?>
<!--

  File:   idb-api.xml
  Author: Alex Samuel
  Date:   2000-11-07

  Contents:
    Chapter `Issue Database API' of qmtrack design document.

  This is part of the master document contained in qmtrack.xml.

  Copyright (C) 2000 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<chapter><title>Issue Database API</title>

 <section><title>Issue database</title>

  <para>The <classname>IdbBase</classname> class is the base class for
  idb implementations.</para>

  <para>Creation and setup methods.</para>

  <programlisting>
<![CDATA[
class IdbBase:
    """Base class for idb implementations."""
]]>
  </programlisting>

  <para>Methods for retrieving issues and revisions.</para>

  <programlisting>
<![CDATA[
    def GetIssue(self, iid):
        """Return the current revision of issue 'iid'."""


    def GetIssueRevision(self, iid, revision_number):
        """Return the revision 'revision_number' of issue 'iid'."""


    def GetAllRevisions(self, iid):
        """Return a sequence of all revisions of an issue.

        'iid' -- The issue of which to retrieve all revisions.

        returns -- A sequence of 'IssueRecord' objects, all
        corresponding to 'iid', indexed by revision number."""


    def GetCurrentRevisionNumber(self, iid):
        """Return the current revision number for issue 'iid'."""
]]>
  </programlisting>

 </section>

 <section><title>Issues</title>

  <para>The canonical in-memory representation of an issue is an
  <classname>IssueRecord</classname> instance.</para>

  <programlisting>
<![CDATA[
class IssueRecord:
    """The canonical representation of an issue."""

    def GetClassName(self):
        """Return the name of the issue class of this issue."""


    def GetFields(self):
        """Return the fields in this issue.  

        returns -- A map from text field names to field values.  What
        each value is depends on the type of that field, as specified
        in the issue class."""


    def GetField(self, field_name):
        """Return the value of the field given by field_name."""


    # Convenience methods for returning values of mandatory fields.

    def GetId(self):
        """Return the iid."""


    def GetRevisionNumber(self):
        """Return the revision number."""


    def GetTime(self):
        """Return the time  at which this revision was recorded."""


    def GetSummary(self):
        """Return a short summary."""


    def GetCategories(self):
        """Return a categories to which this issue belongs.

        return -- A sequence of string names of categories."""


    def GetParents(self):
        """Return a sequence of iids of parents of this issue."""


    def GetChildren(self):
        """Return a sequence of iids of children of this issue."""
]]>
  </programlisting>

 </section>

 <section><title>File attachements</title>

  <para>The <classname>Attachment</classname> class represents an
  attachment.
   <programlisting>
<![CDATA[
class Attachment:
    """A file attachment to an issue."""

    def __init__(self, data, mime_type, description):
        """Create a new IdbAttachment instance."""


    def GetLocation(self):
        """Return the location of the attachment data.

        returns -- An opaque, implementation-defined string specifying
        the location of the data."""


    def GetFile(self):
        """Return a file handle to the attachment data.

        returns -- A readable file object, positioned at the beginning
        of the data."""


    def GetMimeType(self):
        """Return the MIME type of the attachment."""


    def GetDescription(self):
        """Return a description of the attachment."""
]]>
   </programlisting>
  </para>

 </section>

</chapter>

<!--
  Local Variables:
  indent-tabs-mode: nil
  sgml-indent-step: 1 
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  sgml-parent-document: ("qmtrack.xml" "book" "chapter")
  End:
-->
