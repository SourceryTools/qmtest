<?xml version="1.0"?>
<!--

  File:   triggers.xml
  Author: Alex Samuel
  Date:   2000-11-20

  Contents:
    Chapter `Triggers' of qmtrack design document.

  This is part of the master document contained in qmtrack.xml.

  Copyright (C) 2000 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<chapter id="chap-triggers">
 <title>Triggers</title>

 <para><firstterm>Triggers</firstterm> provide a mechanism for
 extending a &qmtrack; issue database in two important ways.
  <orderedlist>
   <listitem>
    <para>A trigger can be used to impose a constraint on the issue
    database.  For instance, a trigger can check that a certain
    condition is fulfilled before allowing a modification to the issue
    database.</para>
   </listitem>

   <listitem>
    <para>A trigger can be used to implement issue database policies
    and workflow by invoking operations in response to user
    actions.</para>
   </listitem>
  </orderedlist>
 </para>

 <section id="sec-trigger-api">
  <title id="sec-trigger-api-title">Trigger API</title>

  <para>A trigger is simply a callable object.  It is invoked with a
  two arguments, both <classname>IssueRecord</classname>
  instances.</para>

  <para>A trigger is registered with the &idb; for one of three
  trigger types:
   <orderedlist>
    <listitem>
     <para>A <literal>"get"</literal> trigger is called before an
     issue is returned from a query or another retrieval
     operation.</para>
    </listitem>

    <listitem>
     <para>A <literal>"preupdate"</literal> trigger is called before
     an update to an issue takes place.</para>
    </listitem>

    <listitem>
     <para>A <literal>"postupdate"</literal> trigger is called after
     an update to an issue takes place.</para>
    </listitem>
   </orderedlist>
  </para>

  <para>Triggers are registered with the &idb; instance.</para>

  <programlisting>
<![CDATA[ class IdbBase:

    def RegisterTrigger(self, type, trigger):
        """Register a trigger.

        'type' -- The type is a string indicating the trigger type.

           * '"get"' triggers are invoked on issue records that are
             retrieved or returned as query results.  The first
             argument to the trigger is the issue being retrieved; the
             second is 'None'.  If the trigger raises a
             'TriggerReject' exception, the issue is not returned.

           * '"preupdate"' triggers are invoked before an issue is
             updated.  The first argument to the trigger is the issue
             before the update; the second is the issue after the
             update.  If the trigger raises a 'TriggerReject'
             exception, the update is not performed.

           * '"postupdate"' triggers are invoked after an issue is
             updated.  The first argument to the trigger is the issue
             before the update; the second is the issue after the
             update.  A 'TriggerReject' exception raised by the
             trigger is ingored.

         'trigger' -- The trigger, a callable object.  The trigger
         takes two arguments, both instances of 'IssueRecord'.

         The same trigger may be registered more than once for each
         type, or for multiple types."""


    def UnregisterTrigger(self, type, trigger):
        """Unregister a trigger.

        'type' -- If 'None', all instances of 'trigger' are
        unregistered.  Otherwise, only instances matching 'type' are
        unregistered.

        'trigger' -- The trigger to unregister."""


    def GetTriggers(self, type):
        """Return a sequence registered triggers of type 'type'."""
]]>
  </programlisting>

  <para>Triggers are invoked in the order they are registered.</para>

  <para>A trigger may raise an instance of
  <classname>TriggerReject</classname>.  
   <orderedlist>
    <listitem>
     <para>For get triggers, this causes the issue to be supressed in
     the result of the &idb; operation.  If the operation was a query,
     the issue is ommitted from the results.  If the operation is a
     single-issue access, the exception object is returned.</para>
    </listitem>

    <listitem>
     <para>For preupdate triggers, this causes the update to be
     cancelled.</para>
    </listitem>

    <listitem>
     <para>For postupdate triggers, the exception is ignored
     silently.</para>
    </listitem>
   </orderedlist>
  </para>

  <para>Triggers may perform other actions as side effects.  Note that
  if multiple preupdate triggers are registered</para>

 </section>

</chapter>

<!--
  Local Variables:
  indent-tabs-mode: nil
  sgml-indent-step: 1 
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  sgml-parent-document: ("qmtrack.xml" "book" "chapter")
  End:
-->
