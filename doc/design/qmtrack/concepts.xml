<?xml version="1.0"?>
<!--

  File:   concepts.xml
  Author: Alex Samuel
  Date:   2000-11-07

  Contents:
    Chapter `Conceptual Architecture' of qmtrack design document.

  This is part of the master document contained in qmtrack.xml.

  Copyright (C) 2000 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

-->
<chapter><title>Conceptual Architecture</title>

 <para>This chapter describes the architecture of the core components
 of &qmtrack;.</para>

 <section><title>Issue Database</title>

  <para>The issue database is an abstract database model used by
  &qmtrack; to store, retrieve, and query issues.  &qmtrack; accesses
  the &idb; via an abstract interface, which allows multiple
  implementations with varying performance and maintenance attributes.
  We envision and accomodate implementations based on underlying
  database technologies such as,
   <itemizedlist>
    <listitem>
     <para>a flat text file</para>
    </listitem>

    <listitem>
     <para>an XML file</para> 
    </listitem>

    <listitem>
     <para>a persistent store of Python objects</para>
    </listitem>

    <listitem>
     <para>SQL-based relational databases such as Postgres, MySQL,
     and Oracle</para>
    </listitem>

    <listitem>
     <para>custom client protocols with remote database
     servers</para>
    </listitem>
   </itemizedlist>
  However, all implementations must support the behaviour specified
  here.</para>

  <para>Issues stored in the &idb; may incorporate different fields.
  Issues are divided according to the contents into issue classes.
  All issues in an issue class have the same fields (though some
  fields may be empty).  Certain fields are part of every issue class,
  and therefore included in every issue.</para>

  <para>The issue database can be thought of as a set of one or more
  tables, each containing issues.  Each table may have a different
  schema;.  Each table corresponds to one issue class, and all issues
  stored in that table are members of that issue class.</para>

  <section><title>Issue classes</title>

   <para>An <firstterm>issue class</firstterm> is a set of issues that
   share the same fields.  When a new issue is created, an issue class
   is chosen for it, and once the issue is created, its class may not
   be changed (though a new issue may be created in another issue
   class by copying fields values).</para>

   <para>The set of available issue classes and the fields contained
   in each are part of the configuration of the &qmtrack; installation.
   New classes may be added to an existing installation, and new
   fields may be added to an existing installation.  However, classes
   may not be removed, and fields may not be removed from
   classes.</para>

  </section>

  <section><title>Fields</title>

   <para>The &idb; consists of a set of tables corresponding to issue
   classes.  Each row of this table corresponds to a single revision
   of an issue.</para>

   <section><title>Field types</title>

    <para>The &idb; supports the following field data types:
     <orderedlist>
      <listitem>
       <para><constant>text</constant> fields contain arbitrary text.
       By convention, the text is not broken into lines with newlines
       (user interfaces will wrap text as necessary).  Paragraphs are
       ended with two newline characters.  There is no length limit on
       text fields.</para>
      </listitem>

      <listitem>
       <para><constant>integer</constant> fields contain a signed
       32-bit integer.</para>
      </listitem>

      <listitem>
       <para><constant>attachment</constant> fields contain an
       arbitrary file attachment.  The attachment consistes of a
       (text) MIME type, a text description, and the binary data of
       the file itself.</para>
      </listitem>

      <listitem>
       <para><constant>set</constant> fields contain zero or more
       instances of another field type.</para>
      </listitem>
     </orderedlist>
    </para>

    <para>The data types listed below are also stored in the &idb;,
    but don't necessarily require additional data type support from
    the underlying database.  The &qmtrack; system will supply an
    implementation of these data types using the above complusory
    types, if required.  However, implementations may override the
    implementation for any or all of these types for space or time
    optimization.
     <orderedlist>
      <listitem>
       <para><constant>string</constant> fields contain short
       character strings.  These fields should not contain newlines,
       carriage returns, tabs, or other control characters (but are
       under no fixed length limit).  Database implementations should
       validate that <constant>string</constant> fields contain
       appropriate values only.</para>
      </listitem>

      <listitem>
       <para><constant>time</constant> fields store a UTC
       date/time.</para>
      </listitem>

      <listitem>
       <para><constant>uid</constant> fields store a user id as a
       <constant>string</constant>.</para>
      </listitem>

      <listitem>
       <para><constant>iid</constant> fields contain an issue id as a
       <constant>text</constant> field.</para>
      </listitem>

      <listitem>
       <para><constant>iid set</constant> fields contain zero or more
       references to other issues in the same &idb;.  These fields are
       typically stored as <constant>integer list</constant> fields in
       the underlying &idb; implementation.</para>
      </listitem>

      <listitem>
       <para><constant>enumeration</constant> fields contain an
       enumerated value: exactly one value selected from a
       preconfigured set of alternatives.  Enumeration values are
       typically stored as integers; the mapping between values and
       enumerals is part of the &idb; configuration.</para>
      </listitem>
     </orderedlist>
    </para>    

   </section>

   <section><title>Issue id</title>

    <para>Each issue has a unique <firstterm>issue id</firstterm>, or
    <firstterm>&iid;</firstterm>.  The &iid; is a text string.  Each
    &qmtrack; installation may choose one of two conventions for
    structuring &iid;s.
     <orderedlist>
      <listitem>
       <para>The &iid;s may be placed in a flat namespace.  The &iid;
       values are arbitrary, and may contain any characters other than
       a period (".").</para>
      </listitem>

      <listitem>
       <para>The &iid;s may be structured in a tree.  Each interior
       node of the tree has an arbitrary name (unique among its
       siblings).  Each leaf of the tree also has an arbitrary name,
       and corresponds to an issue.  The &iid; of the issue is the
       period-delimited sequence of node names, starting from the
       direct children of the root node.  All interior and leaf node
       names may contain any characters except for a period (".").
       Absolute paths in the tree begin with a period.</para>

       <!-- FIXME: How do we specify "up one directory"? -->
      </listitem>
     </orderedlist>
    </para>

   </section>

  </section>

  <section><title>Revisions and audit</title>

   <para>Rows in the &idb; are read-only; in normal circumstances,
   rows are never modified or removed from the table.  Instead, a new
   row is added whenever an issue is modified.</para>

   <para>The &idb; schema includes a <firstterm>revision
   number</firstterm> field.  The revision number value for a row
   indicates which revision of the issue it corresponds to.  When a
   new issue is submitted to the &idb;, a new iid is assigned and a
   new row is added to the &idb; with revision number zero.  When this
   issue is subsequently modified, another row is added containing the
   revised data, and an incremented sequece number.  Previous rows are
   never deleted.  For an issue, the &idb; row with the corresponding
   iid and the highest revision number is the <firstterm>current
   revision</firstterm>.  (When we refer to an issue in this document
   or in the &qmtrack; API, we're referring to the current revision
   unless we specify a revision number explicitly.)</para>

   <para>An audit trail for an issue is obtained by querying the &idb;
   for all rows matching the corresponding &idb;, and sorting by
   sequence number for chronological order.</para>

   <para>Issues may not be deleted.  Rows are generally not deleted
   from the &idb;, except for housecleaning purposes.</para>

  </section>

 </section>

 <section><title>Issues</title>

  <para>An issue is the principal data record in &qmtrack;.  Each
  issue corresponds to a bug report, feature request, or other process
  item in the &qmtrack; database.</para>

  <section><title>Fields</title>

   <para>Each issue (or, more accurately, each revision of each issue)
   contains fields specified by the columns of the &idb; schema.  Fields
   fall into three categories:
    <orderedlist>
     <listitem>
      <para><firstterm>Mandatory fields</firstterm> are present in any
      &idb; issue class and thus in every &qmtrack; issue.  The field
      type and semantics of a mandatory field is invariant; &qmtrack;
      relies on the presence of these fields for its operation.  The
      names of mandatory fields are prefixed with
      "<symbol>qm_</symbol>".</para>
     </listitem>

     <listitem>
      <para><firstterm>Standard fields</firstterm> need not be present
      in any particular issue class, but if they are, take a
      particular field type and have standard semantics.  Optional
      &qmtrack; features and modules may rely on standard fields for
      thier operation.  A component of &qmtrack; or a module which
      uses a standard field must always check first whether the field
      is present, and degrade gracefully if it is not.  The names of
      standard fields are prefixed with "<symbol>qm_</symbol>".</para>
     </listitem>

     <listitem>
      <para><firstterm>Custom fields</firstterm> are other fields
      which are added to an issue class.  Custom fields may not begin
      with the prefix "<symbol>qm_</symbol>".</para>
     </listitem>
    </orderedlist>
   </para>

   <section><title>Mandatory fields</title>

    <para>This section describes mandatory fields.</para>

    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>field name</entry>
        <entry>type</entry>
        <entry>description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>qm_id</entry>
        <entry><constant>iid</constant></entry>
        <entry>issue id</entry>
       </row>
       <row>
        <entry>qm_revision</entry>
        <entry><constant>integer</constant></entry>
        <entry>revision number</entry>
       </row>
       <row>
        <entry>qm_time</entry>
        <entry><constant>date</constant></entry> 
        <entry>the date and time at which this issue revision was
        entered into the &idb;</entry>
       </row>
       <row>
        <entry>qm_summary</entry>
        <entry><constant>string</constant></entry>
        <entry>short summary</entry>
       </row>
       <row>
        <entry>qm_categories</entry>
        <entry><constant>enumeration set</constant></entry>
        <entry>the categories to which the issue belongs</entry> </row>
       <row>
        <entry>qm_parents</entry>
        <entry><constant>iid set</constant></entry>
        <entry>the single iid of the parent issue if this issue was
        created in a split operation; the iid of all parent issues if
        this issue was created in a join operation; an empty set
        otherwise</entry>
       </row>
       <row>
        <entry>qm_children</entry>
        <entry><constant>iid set</constant></entry>
        <entry>the single iid of the child issue if this issue was
        joined with other issues; the iid of all children if this issue
        was split; an empty set otherwise</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>

   </section>

   <section><title>Standard fields</title>

    <para>This section describes standard fields.</para>

    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>field name</entry>
        <entry>type</entry>
        <entry>description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>qm_attachments</entry>
        <entry>special</entry>
        <entry>a collection of zero or more file attachments containing
        arbitrary data</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>

   </section>

  </section>

  <section><title>Attachments</title>

   <para>Arbitrary file attachments may be associated with an issue in
   the &idb;.  For most record-oriented implementations of the &idb;,
   though, the attachments themselves will not be stored in the
   database.  Instead, the attachment data itself will be stored on the
   side in some other repository (such as a file system) and
   incorporated by reference.</para>

   <para>Each attachment includes three pieces of information.
    <orderedlist>
     <listitem>
      <para>A specification of the location of the attachment
      data.</para>
     </listitem>

     <listitem>
      <para>A MIME type, stored as a string.</para>
     </listitem>

     <listitem>
      <para>A description, stored as a string.</para>
     </listitem>
    </orderedlist>
   </para>

  </section>

 </section>

 <section>
  <title>Issue Queries</title>

  <para>Queries are made using an exemplar pattern.  A query is
  specified by providing an issue record in which all fields are empty
  except those for which a match is desired.  The latter fields may
  contain a field value appropriate for that field, if an exact match
  is desired, or a filter function which is used to ascertain
  matches.</para>

 </section>

</chapter>

<!--
  Local Variables:
  indent-tabs-mode: nil
  sgml-indent-step: 1 
  sgml-always-quote-attributes: t
  sgml-general-insert-case: lower
  sgml-minimize-attributes: nil
  sgml-parent-document: ("qmtrack.xml" "book" "chapter")
  End:
-->
