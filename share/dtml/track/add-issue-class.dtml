<dtml-comment><!--

  File:   add-issue-class.dtml
  Author: Alex Samuel
  Date:   2001-06-27

  Contents:
    Form for creating a new issue class.

  Copyright (C) 2001 CodeSourcery LLC.  This material may
  be distributed only subject to the terms and conditions set forth in
  the Software Carpentry Open Publication License, which is available at:

    http://www.software-carpentry.com/openpub-license.html

--></dtml-comment>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xhtmlns="http://www.w3.org/1999/xhtml">
 <dtml-var expr="GenerateHtmlHeader('Add a New Issue Class')">
 <dtml-var expr="GenerateStartBody()">

 <form name="form"
       method="post"
       action="<dtml-var expr="request.copy('new-issue-class').AsUrl()">"
       enctype="multipart/form-data"/>

 <h3>New Issue Class Wizard</h3>

 <dtml-if expr="_.len(errors) > 0">
  <p><span class="error">Your submission contained errors.  Please
  correct them and resubmit this form.</span></p>
 <dtml-else>
  <p>Provide some basic information about the new issue class, and
  specify additional features you would like included.  <dtml-var
  expr="GetName()"> will create a new issue class containing standard
  fields.  Afterwards, you will have the opportunity to add and adjust
  the fields in the issue class.</p>
 </dtml-if>

 <table border="0" cellpadding="4" cellspacing="4" width="100%">

  <tr valign="top"
     <dtml-if expr="errors.has_key('name')">
      class="field-error"
     <dtml-else>
      class="field"
     </dtml-if>
  >
   <td>
    <b>Name</b>
    <p>The name for this issue class.  The name identifies the issue
    class to <dtml-var expr="GetName()">, and is used internally.  The
    name is composed of lower-case letters, digits, and underscores.</p>
   </td>
   <td>
    <input type="text"
           name="name"
           size="40"
           value="<dtml-var expr="request.get('name', '')">" />
    <span class="error">
     <dtml-var expr="errors.get('name', '')">
    </span>
   </td>
  </tr>

  <tr valign="top"
     <dtml-if expr="errors.has_key('title')">
      class="field-error"
     <dtml-else>
      class="field"
     </dtml-if>
  >
   <td>
    <b>Title</b>
    <p>The title of this issue class.  Users of <dtml-var
    expr="GetName()"> refer to the issue class by this title.</p>
   </td>
   <td>
    <input type="text"
           name="title"
           size="40"
           value="<dtml-var expr="request.get('title', '')">" />
    <span class="error">
     <dtml-var expr="errors.get('title', '')">
    </span>
   </td>
  </tr>

  <tr valign="top" class="field">
   <td>
    <b>Categories</b>
    <p>Categories are groups of related issues, such as bug reports for
    a particular program or subsystem.  Each issue may belong to zero,
    one, or more categories.  Provide the names of categories here.</p>
   </td>
   <td>
    <dtml-var expr="MakeCategoriesControl()">
   </td>
  </tr>

<dtml-comment><!--
  <tr valign="top" class="field">
   <td>
    <b>Notification</b>
    <p><dtml-var expr="GetName()"> can send notification email messages
    to fixed list of recipients when an issue of this issue class is
    added or changed.</p>
   </td>
   <td>
    Specify whom to notify:
    <br>
    <dtml-var expr="MakeNotificationControl()">
    <br>
    Send an email notification whenever this Python expression is true
    for a new or modified issue (use "<tt>1</tt>" to send a notification
    always):
    <br>
    <input type="text"
           name="notification_condition"
           size="40"
           value="1"/>
   </td>
  </tr>

    def MakeNotificationControl(self):
        field_name = "notification_subscribers"
        select_name = "_set_" + field_name

        page_info = qm.web.PageInfo(self.request)
        page_info.field_name = field_name
        page_info.select_name = select_name

        page_info.uids = filter(
            lambda uid: 
            qm.user.database[uid].GetInfoProperty("email") is not None,
            qm.user.database.keys())
        
        add_page = web.generate_html_from_dtml(
            "add-notification-subscriber.dtml", page_info)

        return qm.web.make_set_control(
            form_name="form",
            field_name=field_name,
            select_name=select_name,
            add_page=add_page,
            request=self.request)


  <tr valign="top" class="field">
   <td>
    <b>Subscription</b>
    <p><dtml-var expr="GetName()"> can also send notification email
    messages to a list of subscribers specific to each issue.
    Optionally, <dtml-var expr="GetName()"> users can be subscribed
    automatically for notification when they modify the issue.</p>
   </td>
   <td>
    Send an email notification whenever this Python expression is true
    for a new or modified issue (use "<tt>1</tt>" to send a notification
    always):
    <br>
    <input type="text"
           name="subscription_notification_condition"
           size="40"
           value="1"/>
    <br>
    Automatically subscribe the user who adds or modifies the issue
    whenever this Python expression is true (use "<tt>0</tt>" never to
    subscribe a user automatically, or "<tt>1</tt>" always to do so):
    <br>
    <input type="text"
           name="subscription_condition"
           size="40"
           value="1"/>
    <br>
    <input type="checkbox"
           name="hide_subscription"
           checked />
    Hide the list of subscribers when displaying an issue.
   </td>
  </tr>
--></dtml-comment>

 </table>

 <input type="button"
        value=" Create "
        onclick="document.form.submit();"/>
 <dtml-var expr="MakeUrlButton('Cancel',
                     request.copy('config-idb').AsUrl())">

 </form>

 <dtml-var expr="GenerateEndBody()">
</html>

<dtml-comment><!-- 
  Local Variables:
  mode: xml
  indent-tabs-mode: nil
  fill-column:72
  End:
--></dtml-comment>
