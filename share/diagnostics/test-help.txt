########################################################################
#
# File:   test-help.txt
# Author: Alex Samuel
# Date:   2001-04-20
#
# Contents:
#   Common QMTest help message templates.
#
# Copyright (c) 2001 by CodeSourcery, LLC.  All rights reserved. 
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
########################################################################

# Please keep diagnostics in alphabetical order by tag.

@ action class control
**Action Class**

The action class determines how the action is parameterized, and
provides the mechanism by which the action is run.

%(program_name)s provides a collection of built-in action classes which
you may use to create actions.  To use one of these, select it from the
*Standard Classes* list.

You may also create your own action classes.  An action class is
represented by a Python class included in a Python module.  Specify the
class in the text control, using the syntax *module-name.class-name*.

So that %(program_name)s can find the Python module file, you must
include the directory containing it in the environment variable
'QMTEST_CLASSPATH'.  Or, you can place the file in a subdirectory named
'_classes' of your test database directory.


@ action ID
**Action ID**

An action ID is a label that identifies an action.  Action IDs are
unique within a single test database, but are distinct from test IDs and
suite IDs.

The action ID may be composed of lower-case letters, digits, and
underscores.

You may optionally organize actions in a hierarchy using a period as the
path separator.  

Bear in mind that a test's actions are always specified relative to the
the test's path.  For example, the test with ID "core.test1" would
specify the action "core.action1" simply as "action1".


@ action popup
**Specify an Action**

Use this window to specify an action for a test.  An action specifies a
setup behavior that must be executed before the test is run, and/or a
cleanup behavior that must be executed after the test is run.  

Actions are objects distinct from tests, but they reside in the same
test database.  Each action has its own action ID.  

Select an action ID an existing action from the list, or enter an action
ID in the edit control.


@ actions control
**Actions**

The list displays the action IDs of the actions specified for this
test.  To add another action, click on *Add...*.  To remove an action,
select it in the list and click on *Remove.*.


@ category popup
**Specify a Category**

Enter the name of the category to which add the test.  You may use any
text string as the name of a category.


@ categories control
**Categories**

The list displays the names of the categories of which this test is a
member.  To add this test to another category, click on *Add...*.  To
remove this test from a category, select the category's name in the list
and click on *Remove.*.


@ prerequisite popup
**Specify a Prerequisite Test**

Use this window to specify a test prerequisite.  The prerequisite is a
test that is run first, and it must produce an expected outcome for the
prerequisite to be satisfied.  

To specify a prerequisite:

 1. In the **Test ID** field, select the test ID of the prerequisite
    test from the list, or enter it in the text control.

 2. In the **Expected Outcome** field, select the outcome that the
    prerequisite test must produce to satisfy the prerequisite.


@ prerequisites control
**Prerequisite Tests**

The list displays the current prerequisites for this test, showing the
test ID of each prerequisite test and its expected outcome.  To add
another prerequisite, click on *Add...*.  To remove a prerequisite,
select it in the list and click on *Remove*.


@ suite ID
**Test Suite ID**

A test suite ID is a label that identifies a test suite.  Test suite IDs
are unique within a single test database, but are distinct from test IDs
and action IDs.

The test suite ID may be composed of lower-case letters, digits, and
underscores.

The IDs of tests in a test suite are specified relative to the test
suite's ID.  For instance, if your test database contains the tests

    * core.front_end.test1

    * core.back_end.test2

and you create a test suite with ID "core.regression_tests" containing
both tests, you specify the test IDs as "front_end.test1" and
"back_end.test2".  


@ suite suite IDs
**Suite IDs**

The list displays the IDs of other test suites that are *explicitly*
included in this test suite.  When this test suite is run,
%(program_name)s expands all included test suites recursively to
determine the tests to run.

A test suite displays included suite IDs relative to its own ID.  For
example, if the test suite "core.suite1" contains the suites
"core.suite2" , the suite ID in this suite is specified as "suite2" .


@ suite suite IDs control
**Suite IDs**

**Suite IDs** allows you to change the test suites that are *explicitly*
included in this test suite.  When this test suite is run,
%(program_name)s expands all included test suites recursively to
determine the tests to run.

A test suite lists include suite IDs relative to its own ID.  For
example, if the test suite "core.suite1" contains the suites
"core.suite2" , the suite ID in this suite is specified as "suite2" .

The *Included Suites* list displays the IDs of suites that are
explicitly included in this test suite.  The *Available Suites* list
displays the IDs of other test suites that may be included.

To add a suite to this test suite, select it in the *Available Suites*
list and click on *<< Add*.  To remove a test suite from this test
suite, select it in the *Included Suites* list and click on *Remove >>*.


@ suite test IDs
**Test IDs**

The list displays the IDs of tests that are *explicitly* included in the
test suite.  Since the test suite may contain other tests suites, it may
contain other tests as well.

A test suite displays test IDs relative to its own ID.  For example, if
the test suite "core.suite" contains the tests "core.test1" and
"core.linux.test2" , the test IDs in the suite are specified as
"test1" and "linux.test2".


@ suite test IDs control
**Test IDs**

**Test IDs** allows you to change the tests that are *explicitly*
included in the test suite.  Note that the suite may contain other
tests, since it may include other test suites.

A test suite lists test IDs relative to its own ID.  For example, if the
test suite "core.suite" contains the tests "core.test1" and
"core.linux.test2" , the test IDs in the suite are specified as "test1"
and "linux.test2".  Only tests whose IDs begin with "core." may be
included in the suite.

The *Included Tests* list displays the IDs of tests that are explicitly
included in the test suite.  The *Available Tests* list displays the IDs
of other tests that may be included.

To add a test to the test suite, select it in the *Available Tests* list
and click on *<< Add*.  To remove a test from the test suite, select it
in the *Included Tests* list and click on *Remove >>*.


@ test class control
**Test Class**

The test class determines how the test is parameterized, and
provides the mechanism by which the test is run.

%(program_name)s provides a collection of built-in test classes which
you may use to create tests.  To use one of these, select it from the
*Standard Classes* list.

You may also create your own test classes.  An test class is represented
by a Python class included in a Python module.  Specify the class in the
text control using the syntax *module-name.class-name*.

So that %(program_name)s can find the Python module file, you must
include the directory containing it in the environment variable
'QMTEST_CLASSPATH'.  Or, you can place the file in a subdirectory named
'_classes' of your test database directory.


@ test ID 
**Test ID**

A test ID is a label that identifies a test.  Test IDs are unique within
a single test database, but are distinct from action IDs and suite IDs.

The test ID may be composed of lower-case letters, digits, and
underscores.  

You may optionally organize tests in a hierarchy using a period as the
path separator.  Paths specified this way define implicit test suites.
For example, if your test database contains tests with these three IDs

  * core.test1

  * core.test2

  * test3

%(program_name)s recognizes an implicit test suite named "core" which
contains the two tests "test1" and "test2".

In addition, a test's prerequisites and actions are always specified
relative to the test's path.  So, for instance, "core.test2" would
specify "test1" as a prerequisite, not "core.test1".  This implies that
a test cannot specify an action or prerequisite in a different path
(except in subpaths).  For example, "core.test2" cannot specify "test3"
as a prerequisite.


########################################################################
# Local Variables:
# mode: text
# indent-tabs-mode: nil
# fill-column: 72
# End:
