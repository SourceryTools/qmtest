######################################################### -*-Makefile-*-
#
# File:   Makefile
# Author: Alex Samuel
# Date:   2000-12-20
#
# Contents:
#   Top-level qm makefile.
# 
# Copyright (C) 2001, 2002 CodeSourcery LLC
#
# For license terms see the file COPYING.
#
########################################################################

# The QM Tools that are being built in this version of QM.
QM_TOOLS	:= $(notdir \
                     $(filter qm/test, $(wildcard qm/*)))

# This trick is necessary to create a make variable containing a
# single space.  See the "(make)Flavors" info page.
NULLSTRING	:=
SPACE		:= $(NULLSTRING) # This comment needs to be here.

TOPDIR		= @top_srcdir@

PYTHONDOCDIRS	= qm

# Python configuration.
PYTHONBIN	= @PYTHON@
PYTHON 		= PYTHONPATH=$(subst $(SPACE),:,$(PYTHONDIRS)) \
		  $(PYTHONBIN) -O
PYTHON_VERSION	= @PYTHON_VERSION@
PYTHON_PREFIX   = @PYTHON_PREFIX@
PYTHON_PLATFORM = @PYTHON_PLATFORM@
PYTHONDIRS	= $(TOPDIR) \
                  $(TOPDIR)/zope-dtml \
                  $(TOPDIR)/zope-dtml/ExtensionClass

# Python packages with installation scripts.
PYTHON_PACKAGES = \
	qm \
	zope-dtml/DocumentTemplate \
	zope-dtml/ExtensionClass
# The names of rules to install the PYTHON_PACKAGES.
PYTHON_PACKAGES_INSTALL = $(PYTHON_PACKAGES:=-install)

# The scripts that are run to start QM.
SCRIPTS = $(foreach tool,$(QM_TOOLS),qm/$(tool)/qm$(tool)$(SCRIPT_EXT))

# The DTD catalog.
DTD_CATALOG := share/xml/CATALOG
# The common DTDs.
COMMON_DTDS := $(wildcard share/xml/*.mod)
# The tool-specific DTDs.	
TOOL_DTDS := $(foreach tool, \
	       $(QM_TOOLS), \
               $(wildcard qm/$(tool)/share/dtds/*.dtd))
# The tool-specific DTDs, copied to the common XML directory.
COPIED_TOOL_DTDS := $(foreach dtd,$(TOOL_DTDS),share/xml/$(notdir $(dtd)))
# All the DTDs.
DTDS := $(COMMON_DTDS) $(COPIED_TOOL_DTDS)

# Whether or not we should generate documentation.
DOCUMENTATION = @DOCUMENTATION@

# Jade configuration,
JADE = @JADE@
JADEEXTRA = @XML_DCL@
JADECMD = \
	$(JADE) $(foreach dir,$(SGMLDIRS),-D$(dir)) \
	-t $(1) -d ../../../doc/qm-$(1).dsl \
	$(JADEEXTRA)

# The directory containing the Docbook DTD.
SGMLDIRS      += @DOCBOOK_DTD@
# Modular DSSSL stylesheet configuration.  The system identifiers are
# specified as relative paths, so the base of the stylesheet
# installation needs to be provided.
SGMLDIRS      += @DOCBOOK_STYLESHEETS@ 

# The HTML user manuals.
HTML_MANUALS	= $(foreach tool,$(QM_TOOLS),qm/$(tool)/doc/html/index.html)

# The TeX user manuals.
TEX_MANUALS     = $(foreach tool,$(QM_TOOLS),qm/$(tool)/doc/print/manual.tex)

# The PDF user manuals.
PDF_MANUALS     = $(foreach tool,$(QM_TOOLS),qm/$(tool)/doc/print/manual.pdf)

# Tidy configuration.
TIDY 		= @TIDY@
TIDYFLAGS	= -wrap 72 -i --indent-spaces 1

# HappyDoc configuration.
HAPPYDOC	= @HAPPYDOC@

# The install program.
INSTALL		= @top_srcdir@/install-sh -c
INSTALL_DATA    = $(INSTALL) -m 644
INSTALL_DIR     = $(INSTALL) -d -m 755
INSTALL_PROGRAM = $(INSTALL)
INSTALL_SCRIPT  = $(INSTALL_PROGRAM)

# Places to install things.
prefix		= @prefix@
exec_prefix	= @exec_prefix@
INSTALLBINDIR	= @bindir@
INSTALLLIBDIR	= @libdir@/qm
INSTALLSHAREDIR	= @datadir@/qm
INSTALLDOCDIR   = @datadir@/doc/qm
INSTALLINCDIR   = @includedir@

ifneq ($(PYTHON_PLATFORM),win32)
NATPREFIX       := $(prefix)
else
NATPREFIX       := $(shell cygpath -a -w $(prefix))
endif

ifeq ($(PYTHON_PLATFORM),win32)
SCRIPT_EXT = .bat
else
SCRIPT_EXT =
endif

########################################################################
# Main Rules
########################################################################

all: \
	$(PYTHON_PACKAGES) \
	$(SCRIPTS) \
	$(DTD_CATALOG) \
	qm/setup_path.py \
	doc

# Regenerate files that are generated by configure.

%: %.in
	./config.status

########################################################################
# Build Rules
########################################################################

# Build the Python packages.
.PHONY: $(PYTHON_PACKAGES)

$(PYTHON_PACKAGES):
	cd $@ && $(PYTHON) ./setup.py -q build

# Generate executable scripts.
ifneq ($(PYTHON_PLATFORM),win32)
$(SCRIPTS): qm/qm.sh
	rm -rf $@
	cp qm/qm.sh $@
	chmod a-w $@
	chmod a+x $@
else
PYTHONEXE = `@PYTHON@ -c "import sys; print sys.prefix"`\\python
$(SCRIPTS): 
	rm -rf $@
	echo -e "@echo off\r" > $@
	echo -e "set QM_HOME=C:\\progra~1\qm\r" >> $@
	echo -e "set QM_BUILD=0\r" >> $@
	echo -n "$(PYTHONEXE)" \
                 \"%QM_HOME%\\lib\\qm\\$(subst /,\\,$(basename $@)).py\" \
          >> $@
	echo -e " %1 %2 %3 %4 %5 %6 %7 %8 %9\r" >> $@
endif

$(DTD_CATALOG): $(DTDS)
	rm -f $@
	echo "-- This file is automatically generated.  Do not edit. --" \
	  >> $@
	for x in $^; do \
	  name=`expr "\`grep NAME $$x\`" : '<!-- NAME: \(.*\) -->'`; \
	    echo 'PUBLIC "-//Software Carpentry//'$$name'//EN" \
	      "'`basename $$x`'"' \
	      >> $@; \
	done

$(COPIED_TOOL_DTDS): $(TOOL_DTDS)
	cp $(filter %$(notdir $@), $^) $@

clean::
	for x in $(PYTHON_PACKAGES); do \
	  (cd $$x && $(PYTHON) ./setup.py clean); \
	done
ifeq ($(DOCUMENTATION),yes)
	for tool in $(QM_TOOLS); do \
	  rm -rf qm/$$tool/doc/html qm/$$tool/doc/print; \
	done
endif
	rm -f $(SCRIPTS)

distclean: clean
	rm -f GNUmakefile config.cache config.status config.log
	rm -f qm/setup_path.py 
	rm -f qm.spec

# Run tests.
.PHONY: check check-serial check-threads check-processes check-rsh

check: check-serial check-threads check-processes check-rsh

check-serial: all
	qm/test/qmtest -D tests run $(QMTESTFLAGS) \
		-c qmtest_path=qm/test/qmtest

check-threads: all
	rm -f tests/QMTest/thread_target
	qm/test/qmtest -D tests create-target -a threads=4 \
		-T tests/QMTest/thread_target \
		thread thread_target.ThreadTarget
	qm/test/qmtest -D tests run -T tests/QMTest/thread_target \
		$(QMTESTFLAGS) \
		-c qmtest_path=qm/test/qmtest

check-processes: all
	rm -f tests/QMTest/process_target
	qm/test/qmtest -D tests create-target -a processes=4 \
		-T tests/QMTest/process_target \
		process process_target.ProcessTarget
	qm/test/qmtest -D tests run -T tests/QMTest/process_target \
		$(QMTESTFLAGS) \
		-c qmtest_path=qm/test/qmtest

check-rsh: all
	rm -f tests/QMTest/rsh_target
	qm/test/qmtest -D tests create-target \
                -a host=localhost -a remote_shell=ssh \
		-T tests/QMTest/rsh_target \
		rsh rsh_target.RSHTarget
	qm/test/qmtest -D tests run -T tests/QMTest/rsh_target \
		$(QMTESTFLAGS) \
		-c qmtest_path=`pwd`/qm/test/qmtest

########################################################################
# Documentation Rules
########################################################################

.PHONY: doc

ifeq ($(DOCUMENTATION), yes)
doc: doc-html doc-print
else
# If we are not building documentation, there is nothing to do.
doc:
endif

doc-html: $(HTML_MANUALS)

$(HTML_MANUALS): \
	%/html/index.html : \
	%/manual.xml %/introduction.xml %/tour.xml %/reference.xml
	mkdir -p $(dir $@)
	(cd $(dir $<) && \
	  $(call JADECMD,sgml) $(notdir $<)) || \
	  (rm -rf $(dir $@) && false)
ifneq ($(TIDY),no)
	for f in $(dir $@)*.html; \
	do \
	  HTML_TIDY=/dev/null \
		$(TIDY) $(TIDYFLAGS) -f /dev/null -asxml -modify $${f}; \
	  true; \
	done 
endif

.PHONY: doc-print

doc-print: $(PDF_MANUALS)

# Jade places the output TeX source file in the current directory, so
# move it where we want it afterwards.
#
# We have to change -- into -{-} so that TeX does not generate long 
# dashes.  This is a bug in Jade.

$(TEX_MANUALS): \
	%/print/manual.tex : \
	%/manual.xml %/introduction.xml %/tour.xml %/reference.xml
	mkdir -p $(dir $@)
	(cd $(dir $<) && \
	  $(call JADECMD,tex) $(notdir $<)) || \
          (rm -rf $(dir $@) && false)
	sed -e 's|--|-{-}|g' < \
          $(dir $<)$(notdir $@) > $@
	rm $(dir $<)$(notdir $@)

# Process the TeX file to PDF, in the print directory.  
%.pdf: %.tex 
	cd `dirname $@`; \
	  pdfjadetex $(notdir $<); \
	  pdfjadetex $(notdir $<); \
	  pdfjadetex $(notdir $<)

.PHONY: doc-python

doc-python: $(PYTHONDOCDIRS)
	for dir in $(PYTHONDOCDIRS); do \
	    $(PYTHON) $(HAPPYDOC) $${dir}; \
done

########################################################################
# Installation Rules
########################################################################

# Install everything.
.PHONY: install

install: \
	$(PYTHON_PACKAGES_INSTALL) \
	doc-install \
	scripts-install \
	share-install \
	lib-install

# Install Python packages that use distutils.
.PHONY: $(PYTHON_PACKAGES_INSTALL)

# Distutils requires relative paths on Windows.  For consistency,
# we use the same technique everywhere.
RELLIBDIR := $(shell expr "$(INSTALLLIBDIR)" : '$(prefix)/\(.*\)')
RELSHAREDIR := $(shell expr "$(INSTALLSHAREDIR)" : '$(prefix)/\(.*\)')
RELINCDIR := $(shell expr "$(INSTALLINCDIR)" : '$(prefix)/\(.*\)')

# Unfortunately, Python's Distutils do not set permissons on on the
# installed files appropriately.  There is little we can do about this.
#
# The "root" option is undocumented, but apparently necessary, when
# using relative paths for --install-purelib and such.
$(PYTHON_PACKAGES_INSTALL):
	cd $(@:-install=) && \
		$(PYTHON) ./setup.py install -O1 \
	        --prefix="$(NATPREFIX)" --root="$(NATPREFIX)" \
		--install-purelib="$(RELLIBDIR)" \
                --install-platlib="$(RELLIBDIR)" \
                --install-scripts="$(RELSHAREDIR)" \
		--install-data="$(RELSHAREDIR)" \
                --install-headers="$(RELINCDIR)"

# Install documentation.
.PHONY: doc-install

doc-install:
	$(INSTALL_DIR) "$(INSTALLDOCDIR)"
	$(INSTALL_DATA) README "$(INSTALLDOCDIR)"
	$(INSTALL_DATA) COPYING "$(INSTALLDOCDIR)"
	for tool in $(QM_TOOLS); do \
		$(INSTALL_DIR) "$(INSTALLDOCDIR)/$$tool/html"; \
		for x in qm/$$tool/doc/html/*.html; do \
			$(INSTALL_DATA) $$x "$(INSTALLDOCDIR)/$$tool/html"; \
		done \
	done
	for tool in $(QM_TOOLS); do \
		$(INSTALL_DIR) "$(INSTALLDOCDIR)/$$tool/pdf"; \
		$(INSTALL_DATA) qm/$$tool/doc/print/manual.pdf \
		"$(INSTALLDOCDIR)/$$tool/pdf"; \
	done

# Install scripts.
.PHONY: scripts-install

scripts-install:
	$(INSTALL_DIR) "$(INSTALLBINDIR)"
	for script in $(SCRIPTS); do \
	  $(INSTALL_SCRIPT) $$script "$(INSTALLBINDIR)"; \
	done

# Install the lib directory.

.PHONY: lib-install

# Create the extension class directories.
lib-install:
	for tool in $(QM_TOOLS); do \
	  if test -f qm/$$tool/classes/classes.qmc; then \
	    $(INSTALL_DIR) "$(INSTALLLIBDIR)/qm/$$tool/classes"; \
	    $(INSTALL_DATA) qm/$$tool/classes/classes.qmc \
	      "$(INSTALLLIBDIR)/qm/$$tool/classes/classes.qmc"; \
	  fi; \
	done

# Install the share directory.
.PHONY: share-install

share-install: dtml-install messages-install
	for x in `find share \( -name '*.txt' -o -name '*.dtml' \
		  -o -name '*.css' -o -name '*.js' \
		  -o -name '*.gif' -o -name 'CATALOG' \
		  -o -name '*.dtd' -o -name '*.mod' \)`; do \
		y=`expr "$$x" : 'share/\(.*\)'`; \
		$(INSTALL_DIR) "$(INSTALLSHAREDIR)/`dirname $$y`"; \
		$(INSTALL_DATA) "$$x" "$(INSTALLSHAREDIR)/$$y"; \
	done

# Install DTML for each tool.
.PHONY: dtml-install

dtml-install:
	for tool in $(QM_TOOLS); do \
	  $(INSTALL_DIR) "$(INSTALLSHAREDIR)/dtml"; \
	  $(INSTALL_DIR) "$(INSTALLSHAREDIR)/dtml/$$tool"; \
	  for x in qm/$$tool/share/dtml/*.dtml; do \
	    $(INSTALL_DATA) "$$x" \
	      "$(INSTALLSHAREDIR)/dtml/$$tool/`basename $$x`"; \
	  done; \
	done

# Install messages for each tool.
.PHONY: messages-install

messages-install:
	for tool in $(QM_TOOLS); do \
	  $(INSTALL_DIR) "$(INSTALLSHAREDIR)/messages"; \
	  $(INSTALL_DIR) "$(INSTALLSHAREDIR)/messages/$$tool"; \
	  for x in qm/$$tool/share/messages/*.txt; do \
	    $(INSTALL_DATA) "$$x" \
	      "$(INSTALLSHAREDIR)/messages/$$tool/`basename $$x`"; \
	  done; \
	done

# Install the QMTest tutorial.
ifneq (,$(findstring test,$(QM_TOOLS)))
share-install: test-tutorial-install

.PHONY: test-tutorial-install

test-tutorial-install:
	$(INSTALL_DIR) "$(INSTALLSHAREDIR)/tutorial"
	$(INSTALL_DIR) "$(INSTALLSHAREDIR)/tutorial/test"
	$(INSTALL_DIR) "$(INSTALLSHAREDIR)/tutorial/test/tdb"
	for x in qm/test/share/tutorial/tdb/*.qmt; do \
	  $(INSTALL_DATA) "$$x" \
	    "$(INSTALLSHAREDIR)/tutorial/test/tdb/`basename $$x`"; \
	done
	$(INSTALL_DIR) "$(INSTALLSHAREDIR)/tutorial/test/tdb/QMTest"
	$(INSTALL_DATA) "qm/test/share/tutorial/tdb/QMTest/configuration" \
	  "$(INSTALLSHAREDIR)/tutorial/test/tdb/QMTest/configuration"
endif
