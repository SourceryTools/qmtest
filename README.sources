                                                            -*- Text -*-

	       Coding Guidelines for Software Carpentry


Please observe these guidelines when writing, modifying, and checking
in code and documentation for the Software Carpentry project.


  - Create GNU-style ChangeLog entries for all program changes before
    checking anything into CVS.  A description of GNU ChangeLogs is
    available at <http://www.gnu.org/prep/standards_38.html#SEC38>.

    In most GNU/Linux distributions, the description is also installed
    in Info format.  To access them, type

      info "(Standards)Change Logs"

    ChangeLog entries are not required for documentation changes.
    However, all changes to Makefiles and other mechanisms used for
    machine processing of documentation, and changes to style sheets
    and related meta-information, should be accompanied by ChangeLog
    entries.


  - When creating a new source file, use the appropriate template from
    the templates subdirectory.  The template contains the project's
    copyright banner and similar formatting.

    All source files, documentation files, Makefiles, etc. must carry
    the standard copyright banner and a summary of the file's
    contents.


  - Wrap all text to 72 columns.


Instructions for writing documention:

  - Documentation should be written in XHTML, using the standard
    strict XHTML DTD (we do not use a custom DTD).  See
    <http://www.w3.org/MarkUp/> for information about XHTML.

    XHTML is the anointed successor to HTML 4, but, as a subset of
    XML, somewhat stricter.  People who are accustomed to previous
    versions of HTML should watch out for these things:

      o All elements must be closed.  For instance, each paragraph
        must be enclosed in <p>...</p>.  The closing tag is no longer
        optional.

        Even elements that don't delimit anything, such as <img> and
        <br>, must be closed.  For these, you can as shorthand close
        the element by placing a slash before the closing angle
        bracket.  For instance <br/> is considered a complete tag
        pair.

      o Element names must be in lower-case.

      o Attribute values must be quoted, with double-quotes.  For
        instance, <tr valign=top> is no longer OK; you must use 
	<tr valign="top">.


  - Use the .xhtml extension for documentation files.  These files are
    processed to generate .html files by the make system.


  - Before writing any documentation, please read the QM style sheet,
    doc/qm.css.  The comments in the style sheet explain the standard
    element classes used throughout the documentation.  Please use
    these classes as much as possible to express the logical structure
    of your document.


  - Don't use any formatting markup in documents, or define new
    classes.  Use logical markup only.


  - The tidy utility is required to generate HTML from XHTML.  You can
    obtain tidy as source or prebuilt for a variety of platforms from
    <http://www.w3.org/People/Raggett/tidy/>.  You must place tidy
    somewhere in your path, or modify the Makefiles accordingly.

    This requirement will probably be relaxed at a later data.


Instructions for writing code:

Software Carpentry software should be written in standard Python
1.X.X.  Python source code should adhere to Guido van Rossum's "Python
Style Guide", available at

    http://www.python.org/doc/essays/styleguide.html

subject to the following modifications and clarifications:

  - Source text should ideally be wrapped at 72 columns.
    Occasionally, source code may extend to column 78, if this
    produces substantially clearer formatting.

  - All unary operators should be followed by a single space.  All
    binary operators should have a single space on each side.

    Examples:
      c = (a + b) * (a - b)
      substring = x[ : i - 4]

    Exceptions:
      unary minus:              c = -b
      comma:                    (a, b, c)    (a, b, c, )
      colon in statements:      if x == 4:

  - When breaking lines at operators, place the operator on the second
    line.

    Example:
      if some_condition () \
         and j < i + 2:
	  c = first_function (i) \
	      + second_function (j)

  - All comments and doc strings should be written in full sentences.
    Capitalize the first word of the sentence, unless it is a name
    from source code (and try to avoid this case).  End each sentence
    with punctuation, and separate sentences with two spaes.

  - Avoid placing comments on the same line as code.  A comment in the
    body of a function should be placed on the line(s) above the code
    it comments.

  - Do not use special CVS substitution keywords ("Id:, "Author:",
    etc.) in source code.

  - Always use the followng naming conventions:

      Item               Style
      ----------------------------------------
      modules            underscore_delimited
      classes            CamelCaps
      global names       underscore_delimited
      class fields       CamelCaps
      local variables    underscore_delimited

Every program element (module, class, function, etc.) should be
provided with a doc string.  Doc strings should be written in
structured text, using full sentences.  Begin and end all doc strings
with three double quotes (""").

The first line of each doc string should be a short summary sentence
for the item.  If necessary, a detailed description should follow,
separated by a blank line.  All source code names (such as variable
and parameter names) mentioned in doc strings should be surrounded by
single quotes.

All function parameters should be documented (except for self, for
class methods).  Return values, preconditions, postconditions, and
potentially raised exeptions should also be mentioned explicitly.
These may be documented in the text description of the function, or as
a definition-style list (write the name of the parameter, two dashes
(--), and then a description.  For example,

    def read_file(file, filter=None):
	"""Read data from a file, filtering as necessary.

	preconditions -- 'file' is rewound to the beginning.

	'file' -- A file object to read from.

	'filter' -- A 'FooFilter' instance, or 'None' for no filtering.

	raises -- 'IOException' if 'file' cannot be read.

	postconditions -- 'file' is closed.

	returns -- The filtered data."""

Doc strings should be used for interface documentation, i.e. the
information that another programmer needs to know to use the element
correctly.  Implementation, i.e. how a function actually does its job,
should be commented using ordinary comments,

All source code checked into the Software Carpentry source repository
should comply with these guidelines.  
